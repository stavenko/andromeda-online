var app = angular.module("user-console",["treeControl",'ngRoute']);

/*
app.run(["$rootScope","$location", function($rootScope, $location){
    $rootScope['user-console-globals']['$location'] = $location;
}])

*/


var uMap = {
        '':{ label:"Главная","controller": 'rootCont', "templateUrl":"/templates/Root.html"},
        "assets":{ label:"Активы", "controller": 'UserAllAssets', "templateUrl":"/templates/UserAllAssets.html"},
        "ships":{ label:"Мои корабли", "parent":"assets", "controller": 'UserShips', "templateUrl":"/templates/UserShips.html"},
        "goods":{ label:"Разные вещи", "parent":"assets", "controller": 'UserAssets', "templateUrl":"/templates/UserAssets.html"},
        
        "market":{ label:"Рынок", "controller": 'MarketCont', "templateUrl":"/templates/Market.html"},
        "production":{ label:"Производство", "controller": 'ProductionCont', "templateUrl":"/templates/Production.html"},
        "ownProd":{ label:"Собственные фабрики", parent:'production',  "controller": 'OwnPlantsCont', "templateUrl":"/templates/OwnPlants.html"},
        
        "missions":{ label:"Миссии", "controller": 'MissionsCont', "templateUrl":"/templates/Missions.html"},
        "mission-constructor":{ label:"Конструктор миссий", parent:'missions', "controller": 'MissionConstructorCont', "templateUrl":"/templates/MissionConstructor.html"}
        
}

app.constant("moduleUrlMap", uMap)


var getUrls = function(map){
    var url_list = {}

    var getUrl = function(addr, obj, map){
        var na = obj.parent;
        if (parent in map[na]){
            root = getUrl(na, map[na], map);
        }else{
            root = '/';
        }
        return root + na + "/" +addr;
    }

    for(var addr in map){
        var obj = map[addr];
        if('parent' in obj){
            var u = getUrl(addr, obj, map);
        }else{
            var u = "/" + addr;
        }
        // console.log("R",u);
        var no = {url:u, _name: addr,  label:obj.label, ang:{controller:obj.controller, templateUrl:obj.templateUrl }};
        if('parent' in obj){
            no.parent = obj.parent;
        }
        url_list[u] = no;
    }
    return url_list;

}
var getUrlTree = function(map){
    // Надо составить индекс типа
    // {"/url/":[1,2] } - Цифры - это индексы итемов в дереве с чилдренами
    var tree = [];
    var objs = {};
    var roots = [];
    for (var item  in map){
        var obj = map[item];
        obj.children = []
        objs[obj._name] = obj;
        if('parent' in obj){
            // console.log("objs", objs, obj.parent, obj._name);
            objs[obj.parent].children.push(obj);
            // console.log(objs[obj.parent].children);
        }else{
            roots.push(obj._name);
            
        };
    }
    var rtree = [];
    for(var r in roots){
        // console.log("fuck", r);
        rtree.push( objs[roots[r]])
        
    }
    return rtree;
    
}
// getUrlTree(getUrls(uMap));

app.constant("moduleUrls", getUrls(uMap));
app.constant("navTree", getUrlTree(getUrls(uMap) ) );

app.config(["$routeProvider", "moduleUrlMap",  function($routeProvider, moduleUrlMap){
    // $log.log(">>>");
    // $routeScope['user-console-globals'] = {}
    
    var rp = $routeProvider;
    var map  = getUrls(moduleUrlMap);
    // console.log(">>", map);
    for(var url in map){
        // console.log(url);
        rp =  rp.when(url, map[url].ang)
    }
    // rp.otherwise({redirectTo:"/"})
    /*
    $routeProvider
    .when("/assets",{
        controller:"UserAllAssets",
        templateUrl:"/templates/UserAllAssets.html"
    })
    .when("/", {
        controller: "rootCont",
        templateUrl:"/templates/Root.html"
        
    })
    .otherwise({redirectTo:"/"})
    */
}]);


app.controller("userConstructionCont", ["$scope","socketListeners", function($scope,  ws){
    
    ws.register("bookmarked-objects", function(message){
        console.log(message);
        $scope.bookmarkedObjects = message.objects;
        
    })
    
}])
app.controller('UserAllAssets', function($scope, $log, $location, moduleUrls){
    
    var url = $scope.$parent.location.url();
    
    var node = moduleUrls[url];
    
    // $scope.$parent.selected_node = node;
    
    
    $scope.assets = [
    {name:'ble-bla', type:'ship', loc:{}},
    {name:'white Widow', type:'ship', loc:{}},
    {name:'Mavericks', type:'rockets', loc:{ }}
    ]  
    
    
})
app.controller("rootCont", function($scope){
    $scope.hello = "Hello";
})
app.controller('consoleBrowser',['$scope', "$log", "$location", 'navTree',function($scope, $log, $location, navTree){
    $scope.vaar = "Hello cont";
    $log.log($location.path());
    $scope.location = $location;
   // $scope.route = r;
//     $scope.routeProvider = rp;

    //console.log("navTree", navTree);
    $scope.dataForTheTree = navTree;

    $scope.selected_node = navTree[1];
    
    $scope.showSelected = function(node){
        $log.log("showSelected", node);
        $location.url(node.url);
        
    }
    
}] );



app.service('authHash',['$http', '$log', function($http, $log){
    return {
        is_inited:false,
        _hash:null,
        _init:function(cb){
            var that = this;
            this._hash = $http.get( '/my-auth-hash/')
            .then(function(resp){
                $log.log("ah", resp);
                // that._hash = data.hash;
                cb(resp.data.hash)
                
            })
            
        },
        get: function( cb ){
            this._init( cb )
            $log.log("L",this.q, this._hash);
            return this._hash; 
        }
    }
  }] )

app.factory('socket', function ($rootScope, authHash) {
    var socket = io.connect();
    socket.on('connected', function(){
        // console.log("reconnection");
        authHash.get(function(hash){
            // console.log("auth_hash", hash);
            socket.emit("auth_hash_console", {auth: hash})
            
        })
    })
  return {
    getState: function(){return "good"},
    on: function (eventName, callback) {
      socket.on(eventName, function () {  
        var args = arguments;
        $rootScope.$apply(function () {
          callback.apply(socket, args);
        });
      });
    },
    emit: function (eventName, data, callback) {
      socket.emit(eventName, data, function () {
        var args = arguments;
        $rootScope.$apply(function () {
          if (callback) {
            callback.apply(socket, args);
          }
        });
      })
    }
  };
});

app.service("socketListeners",['socket', function(socket){
    // Здесь мы хотим создать службы, которая регистрирует несколько обновлений на любые входящие socket.io запросы
    var Listeners = {
        _listeners : {}
    }
    Listeners.register = function(eventType, cb) {
        if(this._listeners[eventType] == null){
            this._listeners[eventType] = [cb];
            return 0;
        }else{
            return this._listeners[eventType].push(cb) - 1; // current item index
        }
    }
    socket.on("user-console", function(message){
        var message_type = message.type;
        
        angular.forEach(Listeners._listeners[message_type], function(listener){
            listener(message);
        })
        
    })
    
    return Listeners;
    
    
}])
//# sourceMappingURL=data:application/json;base64,