window.GameContextLoader=function(e){var n=[],o=[],t=[],c=[],r=Q.defer();return e.request("CTX",{user_id:!0}).then(function(s){console.log("CONTEXT",s),_.each(s.contexts,function(r,s){var i=[];c.push(s);var a=r.GUID,u=Q.defer();if(-1===t.indexOf(a)){t.push(a),n.push(u.promise);var l=r.objects,h=r.actors;r.location.g.orbit&&o.push(e.get("celectial-recursive",{GUID:r.location.g.orbit.C})),_.each(l,function(n){var o=e.get("A",{id:n}).then(function(n){return e.get("T",{type:n.ship_type}).then(function(e){return n.ship_type=e,n})});i.push(o)}),Q.all(i).then(function(e){console.log("II",e);var n=new THREE.Scene,o=new Scene(n,self);o.GUID=a,o.onLoadCallback=function(){u.resolve({scene:o,threeScene:n,actors:r.actors})},_.each(h,function(e){o.join_actor(e)}),_.each(e,function(e){o.join_object(e,e.GUID)})}).catch(function(e){console.error(e)})}}),0==n.length?r.reject("No scenes to load"):Q.all(n).then(function(e){r.resolve({scenes:e,currentUserActors:c})})}).catch(function(e){console.error(e)}),r.promise};
window.KeyStateManager=function(e,t){if(void 0==e)return void console.error(" Keymap not given");if(void 0==syncronizer)return void console.error("Syncing is not set up");var n={x:0,y:0};this.mouseState=n;var i=this;document.addEventListener("mousemove",function(e){n.x=e.x,n.y=e.y},!1),this.renderer.domElement.addEventListener("mouseup",function(){i.input("lmouse",!1)}),this.renderer.domElement.addEventListener("mousedown",function(){i.input("lmouse",!0)}),document.addEventListener("keydown",function(e){var t=e.keyCode;i.input(t,!0)},!1),document.addEventListener("keyup",function(e){var t=e.keyCode;i.input(t,!1)},!1),this.keyCodes={},this.input=function(e,t){var n=(new Date).getTime();if(t)this.keyCodes[e]={in_action:!0,ts:n};else if(this.keyCodes[e]){var i=this.keyCodes[e].ts;this.keyCodes[e].in_action=!1,this.keyCodes[e].ts=n,this.keyCodes[e].delta=n-i}},this.getLatestActions=function(n){var i=[],s=this;return _.each(this.keyCodes,function(o,d){if(o.in_action){var r=n-o.ts,a=n;o.ts=n}else{var r=o.delta,a=o.ts;delete this.keyCodes[d]}_.clone(self.actions[d]);if(d in e){var u=e[d],c={mesh:u.mesh,dev:u.device,name:u.name,ts:a,ident:a+t._time_diff+t.avg_latencity,delta:r/1e3,wmouse:s.getMouseProjectionArray()};i.push(c)}}),i}};
window.NetworkManager=function(){this._callbacks={},this.on=function(t,c){t in this._callbacks?this._callbacks[t].push(c):this._callbacks[t]=[c]},this.socketListener=function(t,c){var i=this._callbacks[t];_.each(i,function(t){t(c)})},this.socketService=SocketServiceGetter(this.socketListener.bind(this))};
window.Renderer=function(){console.error("Renderer is not defined")};
window.SocketServiceGetter=function(e){"use strict";if(void 0==window._socketServiceCache){var n=function(){function n(){return f+=1,f%1e4}var t=function(e){var n=(Q.defer(),new XMLHttpRequest);n.open("GET","/my-auth-hash/",!0),n.send(),n.onreadystatechange=function(){if(4==n.readyState&&200==n.status){var t=JSON.parse(n.responseText);e(t)}}},r=io.connect(),o=!1,c=[],i=Q.defer();r.on("connected",function(){t(function(e){r.emit("auth_hash",{auth:e.hash})})}),r.on("auth_completed",function(e){e.err?i.reject(e.err):i.resolve(!0)}),i.promise.then(function(){o=!0;for(var e=0;e<c.length;e++)r.emit(c[e].T,c[e].p)});var u={},a={},f=0,s=function(e,t,i){var u=Q.defer(),f=n();a[f]={cb:u};var s={p:i};return s.cbix=f,s.T=t,o?r.emit(e,s):c.push({T:e,p:s}),u.promise},h=["Q","R","S"];return _.each(h,function(e){r.on(e,function(e){var n=e.cbix;a.hasOwnProperty(n)&&(a[n].cb.resolve(e.d),delete a[n])})}),r.on("F",function(n){e("F",n)}),r.on("ALM",function(n){e("ALM",n)}),u.get=function(e,n){return s("Q",e,n)},u.sync=function(){return s("S","",{})},u.request=function(e,n){return s("R",e,n)},u.action=function(e){r.emit("A",e)},u};window._socketServiceCache=new n}return window._socketServiceCache};
window.View=function(i,t){this.actors={},this.UIS=[],this.sceneGUID=i,this.viewName=t,this.addActor=function(i){this.actors[i.GUID]=i},this.addUI=function(i){this.UIS.push(i)}};
window.Viewport=function(i){this.config=i,this.doDrawUI=function(){return this.config.drawUI},this.bind=function(i){this.view=i}};
window.World=function(e,t){this.auth_hash=e,this.user_id=t,this.initRenderer(),this.setupViewports(),this.initNetworking();var i=function(){var e=this;this.startSceneLoading().then(function(){console.info("Go loading"),e.initViews(),e.collectActions(),e.initSyncing(),e.initKeymapping(e.getKeyBinding(),e.getSynchronizer())}).then(function(){console.info("Go simulation"),this.startSimulation()}).fail(function(t){console.warn(t),setTimeout(i,3e3),e.clear(),delete e}).catch(function(t){console.error(t),e.clear()}).done()};(i=i.bind(this))()},window.World.prototype=_.extend(window.World.prototype,{clear:function(){if(this.scenes){console.info("clearing scenes");for(var e in this.scenes)this.scenes[e].clear(),this.scenes[e]=null}},initRenderer:function(){this.renderer=new Renderer},setupViewports:function(){var e=this.renderer.width/4*3,t=this.renderer.width/4,i=this.renderer.height/2,n=[{l:0,t:0,w:this.renderer.width,h:this.renderer.height,drawUI:!0},{l:e,t:2*i,w:t,h:i},{l:e,t:i,w:t,h:i},{l:e,t:0,w:t,h:i}],o=[];_.each(n,function(e){o.push(new Viewport(e))}),this.viewPorts=o},initKeymapping:function(e,t){this.keyStateManager=new KeyStateManager(e,t)},initNetworking:function(){this.networkManager=new NetworkManager},startSceneLoading:function(){var e=GameContextLoader(this.networkManager.socketService),t=this;return t.scenes={},t.actors={},t.actorScene={},e.then(function(e){_.each(e.scenes,function(i){t.scenes[i.scene.GUID]=i.scene,_.each(i.actors,function(n){-1!==e.currentUserActors.indexOf(n.GUID)&&(t.actors[n.GUID]=n,t.actorScene[n.GUID]=i.scene)})})})},initViews:function(){var e=this,t={views:{},viewOrder:[],identityMap:{},add:function(e,t,i,n){e in this.views||(this.views[e]=t,this.viewOrder.push(e)),this.views[e].addActor(i),this.views[e].addUI(n)},get:function(e){return this.views[e]},getIx:function(e){var t=this.viewOrder[e];return this.get(t)}};_.each(this.actors,function(i){var n=e.actorScene[i.GUID],o=n.get_object(i.control.object_guid).workpoints[i.control.workpoint].views,r=n.meshes[i.control.object_guid],s=r.getUIForWP(i.control.workpoint);_.each(o,function(e){var o=n.GUID+i.control.object_guid+e,r=new View(n.GUID,e);t.add(o,r,i,s)})}),this.viewCollection=t,this.viewPorts[0].bind(this.viewCollection.getIx(0))},collectActions:function(){var e=this;_.each(this.viewPorts,function(t){if(t.doDrawUI()&&t.view){var i=t.view;_.each(i.actors,function(t){var i=e.actorScene[t.GUID].getActions()[t.control.object_guid];console.info("actions ",i,t)})}})}});
!function(){var t=function(){this._vals={},this.setValue=function(t,n){this._vals[t]=n},this.init=function(){this.cont=$("<div>").css({position:"fixed",top:0,right:0,width:400,bottom:0,"background-color":"rgba(0,200,100,0.7)"}).appendTo("body")},this.redraw=function(){this.cont.find("*").remove();for(var t in this._vals)c=$("<div>").appendTo(this.cont),l=$("<span>").html(t+"&nbsp;: &nbsp;").css("font-weight","bold").appendTo(c),v=$("<span>").text(this._vals[t]).appendTo(c)}};window.SL=new t}();
//# sourceMappingURL=data:application/json;base64,