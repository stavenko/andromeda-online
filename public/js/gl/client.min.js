World=function(){function e(){this.name="Cons"}return e}(),window.World.init=function(e,t){this.__vpx=0,this.auth_hash=e,this.login=t,this.p=new THREE.Projector,this.three_scenes={},this.scenes={},this.flares={},this.clock=new THREE.Clock;var i=new THREE.SphereGeometry(5);this.cur=new THREE.Mesh(i),this.vp_width=document.body.clientWidth,this.vp_height=400,this._main_viewport=0,this._additional_vps=[],this.sceneActions={},this._input_keymap={},this._uniform_updaters={};var n=dcodeIO.ProtoBuf;this.protobufBuilder=n.loadProtoFile("/js/gl/client_message.proto");var s=this.vp_height/3,o=this.vp_width/4,r=this.vp_width-o;this._additional_vps_geom=[{l:r,t:2*s,w:o,h:s},{l:r,t:s,w:o,h:s},{l:r,t:0,w:o,h:s}],this._main_vp_geom={l:0,t:0,w:this.vp_width,h:this.vp_height},this.skyboxScenes={},this.skyBoxes={},this.skyBoxCamera={},this.mouse_projection_vec=new THREE.Vector3,SL.init();var h=this;return h.pings=[],h.pings_instability=[],h._time_diffs=[],this.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),this.renderer.setSize(this.vp_width,this.vp_height),this.renderer.setClearColor(new THREE.Color(0)),document.body.appendChild(this.renderer.domElement),this.renderer.gammaInput=!0,this.renderer.gammaOutput=!0,this.renderer.autoClear=!1,this.renderer.physicallyBasedShading=!0,this._camera_rot_q=new THREE.Quaternion,document.addEventListener("mousemove",function(e){h.mouse_x=e.x,h.mouse_y=e.y},!1),this.renderer.domElement.addEventListener("mouseup",function(){h.Inputs.input("lmouse",!1)}),this.renderer.domElement.addEventListener("mousedown",function(){h.Inputs.input("lmouse",!0)}),document.addEventListener("keydown",function(e){var t=e.keyCode;h.Inputs.input(t,!0)},!1),document.addEventListener("keyup",function(e){var t=e.keyCode;h.Inputs.input(t,!1)},!1),h.init_socket(),h},window.World.set_actions=function(){self.actions=self._default_actions};
window.World.render=function(e,t){this.redrawSun(e),this.renderer.setViewport(t.l,t.t,t.w,t.h),this.redrawSky(e),this.scenes[e.scene]._action_on_the_run_var&&console.log("render M"),this._cur_cam=e.three_camera,this.renderer.render(this.three_scenes[e.scene],e.three_camera)},window.World.redrawSky=function(e){var t=e.three_camera.parent.matrix.clone(),o=e.three_camera.matrix.clone();t.multiply(o);var n=(new THREE.Matrix4).extractRotation(t),r=(new THREE.Euler).setFromRotationMatrix(n);this.skyBoxCamera[e.scene].rotation.copy(r),this.renderer.render(this.skyboxScenes[e.scene],this.skyBoxCamera[e.scene])},window.World.get_main_viewport=function(){return this._viewports[this._main_viewport]},window.World._init_vps=function(){var e=this._viewports[this._main_viewport],t=this;e.geom={t:0,l:0,w:this.vp_width,h:this.vp_height},e.three_camera=this.makeCamera(e),_.each(e.UIS,function(e){e.construct()}),_.each(e.actors,function(e){var o=t.sceneActions[e.scene][e.control.object_guid][e.control.workpoint];_.each(o,function(e){e.default_key&&(t._input_keymap[e.default_key]=e)})}),this.three_scenes[e.scene].add(this.cur),this.initSpace(e);var t=this;t.Inputs=new Controller.LocalInputActor(t,t.socket),_.each(this._additional_vps,function(e,o){var n=t._viewports[e];n.geom=t._additional_vps_geom[o],n.three_camera=t.makeCamera(n),t.initSpace(n)})},window.World.setupCameras=function(){var e=this;e._viewports={},e._viewport_amount=0;var t=!0;_.each(e.actors,function(o){var n=o.control.workpoint,r=e.scenes[o.scene].get_objects()[o.control.object_guid].workpoints[n].views,i=e.scenes[o.scene].meshes[o.control.object_guid],s=i.getUIForWP(n);_.each(r,function(n){var r=o.scene+o.control.object_guid+n;if(t&&(e._main_viewport=r),r in e._viewports){e._viewports[r].actors.push(o);var i=e._viewports[r].UIS;e._viewports[r].UIS=i.concat(s)}else{var c={scene:o.scene,object:o.control.object_guid,camera:n,actors:[o],UIS:s};e._viewports[r]=c,e._viewport_amount+=1}})}),e._init_vps();var o=document.getElementById("viewports-select");o.innerHtml="",_.each(e._viewports,function(e,t){var n=document.createElement("option");n.value=t,n.appendChild(document.createTextNode(e.camera)),o.appendChild(n)})},window.World.redrawSun=function(e){var t=this.scenes[e.scene].meshes[e.object],o=(new THREE.Vector3).fromArray(this.scenes[e.scene]._scene.sunDirection).multiplyScalar(10);this.flares[e.scene].position=t.position.clone().add(o)},window.World.makeCamera=function(e){var t=this,o=e.scene,n=e.object,r=e.camera,i=t.scenes[o].meshes[n],s=t.scenes[o].get_objects()[n],c=new THREE.PerspectiveCamera(45,e.geom.w/e.geom.h,1,1e3),a=new THREE.Vector3,_=new THREE.Vector3;a.set.apply(a,s.cameras[r].position),_.set.apply(_,s.cameras[r].direction);var h=new THREE.Vector3(0,0,-1),d=new THREE.Vector3;d.crossVectors(h,_);var u=Math.acos(h.dot(_)/h.length()/_.length());return 0!==d.length()||h.equals(_)||(d=new THREE.Vector3(0,1,0),u=Math.PI),c.rotateOnAxis(d,u),c.position=a,i.add(c),c},window.World.setup_scene=function(e){material=new THREE.MeshBasicMaterial({color:16711680,wireframe:!0});var t=(new THREE.Vector3).fromArray(e._scene.sunDirection),o=new THREE.AmbientLight(65793);this.three_scenes[e.GUID].add(o);var n=new THREE.DirectionalLight(16777198,1);n.color.setHSL.apply(n.color,e._scene.sunLightColor),n.position=t,this.three_scenes[e.GUID].add(n),this.initSun(e),this.sceneActions[e.GUID]=e.getActions()},window.World.bindCamera=function(){var e=this,t=e.get_current_actor(),o=e.meshes()[t.control.object_guid];o.add(e.camera),e.setCamera()},window.World.go=function(){var e=this;e.setupCameras();var t=function(){_.each(e.scenes,function(e){e.tick()})},o=function(){if(e.total_objects_count===e.loaded_objects_count){t();var n=e.get_main_viewport(),r=e._main_vp_geom;_.each(e._uniform_updaters,function(e){e()}),e.render(n,r),_.each(n.UIS,function(e){e.refresh()}),e.mouse_projection_vec.set(e.mouse_x/r.w*2-1,2*-(e.mouse_y/r.h)+1,.99),e.p.unprojectVector(e.mouse_projection_vec,n.three_camera),e.cur.position.copy(e.mouse_projection_vec),_.each(e._additional_vps,function(t,o){var n=e._viewports[t];e.render(n,e._additional_vps_geom[o])})}SL.redraw(),requestAnimationFrame(o)};requestAnimationFrame(o)};
window.World.load_scene=function(e,n){var t=new Scene;t.set_from_json(e),this.scenes[t.GUID]=t,this.three_scenes[t.GUID]=new THREE.Scene,t.load(n,this.three_scenes[t.GUID],this)},window.World.initSun=function(e){var n=new THREE.Color(16777215),t=_.clone(e._scene.sunLightColor);t[2]+=.5,n.setHSL.apply(n,t);var i=THREE.ImageUtils.loadTexture("/textures/lensflare/lensflare0.png"),s=THREE.ImageUtils.loadTexture("/textures/lensflare/lensflare2.png"),d=THREE.ImageUtils.loadTexture("/textures/lensflare/lensflare3.png"),r=new THREE.LensFlare(i,700,0,THREE.AdditiveBlending,n);r.add(s,512,0,THREE.AdditiveBlending),r.add(s,512,0,THREE.AdditiveBlending),r.add(s,512,0,THREE.AdditiveBlending),r.add(d,60,.6,THREE.AdditiveBlending),r.add(d,70,.7,THREE.AdditiveBlending),r.add(d,120,.9,THREE.AdditiveBlending),r.add(d,70,1,THREE.AdditiveBlending);var o=function(e){var n,t,i=e.lensFlares.length,s=2*-e.positionScreen.x,d=2*-e.positionScreen.y;for(n=0;i>n;n++)t=e.lensFlares[n],t.x=e.positionScreen.x+s*t.distance,t.y=e.positionScreen.y+d*t.distance,t.rotation=0;e.lensFlares[2].y+=.025,e.lensFlares[3].rotation=.5*e.positionScreen.x+THREE.Math.degToRad(45)};r.customUpdateCallback=o,r.position=(new THREE.Vector3).fromArray(e._scene.sunDirection).multiplyScalar(500),this.three_scenes[e.GUID].add(r),this.flares[e.GUID]=r},window.World.initSpace=function(e){var n="/textures/space/m01_cube",t="png",i=[n+".px."+t,n+".nx."+t,n+".py."+t,n+".ny."+t,n+".pz."+t,n+".nz."+t],s=THREE.ImageUtils.loadTextureCube(i),d=THREE.ShaderLib.cube;d.uniforms.tCube.value=s;var r=new THREE.ShaderMaterial({fragmentShader:d.fragmentShader,vertexShader:d.vertexShader,uniforms:d.uniforms,depthWrite:!1,side:THREE.BackSide});this.skyboxScenes[e.scene]=new THREE.Scene;var o=new THREE.Mesh(new THREE.CubeGeometry(9e3,9e3,9e3),r);this.skyBoxes[e.scene]=o,this.skyBoxCamera[e.scene]=new THREE.PerspectiveCamera(45,e.geom.w/e.geom.h,1,1e4),this.skyboxScenes[e.scene].add(o)},window.World.make_main=function(){var e=document.getElementById("viewports-select");this._main_viewport=e.options[e.selectedIndex].value,this._init_vps()},window.World.add_icon=function(){var e=document.getElementById("viewports-select");add_vp=e.options[e.selectedIndex].value,3==this._additional_vps.length?this._additional_vps[2]==add_vp:this._additional_vps.push(add_vp),this._init_vps()},window.World.meshes=function(){return this.scene.meshes},window.World.controllable=function(){var e=this.get_main_viewport();return this.scenes[e.scene].meshes[e.object]},window.World.mesh_for=function(e){return this.meshes()[this.scene.actors[e].control.object_guid]},window.World.get_current_actor=function(){var e=this;return e.scene.actors[e.login]};
window.World.init_socket=function(){var e=window.location.origin,s=io.connect(e);this.socket=s;var t=this;this.socket.on("connected",function(){t.socket.emit("auth_hash",{auth:t.auth_hash})}),this.socket.on("server_fault",function(){}),this.socket.on("actors",function(e){var s=e.actors;t.actors=s,t.syncTime();var n=_.map(t.actors,function(e){return e.scene});t.socket.emit("request_scenes",{scenes:_.uniq(n)})}),this.socket.on("scenes",function(e){var s=_.keys(e.scenes),n=0,o=function(){t.go(),t.network_actor=new Controller.NetworkActor(function(){},t)},i=function(e){n+=1,t.setup_scene(e),_.each(t.actors,function(s){s.GUID in e.actors&&t.socket.emit("actor-joined",{a:s,s:e.GUID})}),n==s.length&&o()};_.each(e.scenes,function(e){t.load_scene(e,i)})}),this.socket.on("actor-joined",function(e){e.GUID in t.scenes[e.scene].actors||t.scenes[e.scene].join_actor(e)}),this.socket.on("scene_sync",function(e){void 0!==t.scenes[e.scene]&&t.scenes[e.scene].sync(e.almanach)}),this.socket.on("player-inputs",function(e){console.log("RR",e),t.scenes[e.s].addNetworkMessage(e.a)})},window.World.syncTime=function(){this._sync_timestamp=(new Date).getTime();{var e=this;this.protobufBuilder.build("Actions")}this.socket.emit("sync_request");var s=50;this._sync_message_setup||(this.socket.on("clock_response",function(t){var n=(new Date).getTime(),o=n-e._sync_timestamp;e.pings.push(o);var i=o/2,c=t.ts-e._sync_timestamp-i;e._time_diffs.push(c),e._time_diffs.length>s&&e._time_diffs.splice(0,1),e._time_diff=Math.floor(_.reduce(e._time_diffs,function(e,s){return e+s},0)/e._time_diffs.length),e.max_ping=_.max(e.pings),setTimeout(function(){e.syncTime()},1e3)}),this._sync_message_setup=!0)},window.World.sendAction=function(e,s){var t=_.clone(s);t.ts+=this._time_diff,t.p=JSON.stringify(t.p),console.log("act before sending",t.ident),delete t.vector,this.socket.emit("user_actions",{s:e,a:t})};
function StaticLogger(){this._vals={},this.setValue=function(t,i){this._vals[t]=i},this.init=function(){this.cont=$("<div>").css({position:"fixed",top:0,right:0,width:400,bottom:0,"background-color":"rgba(0,200,100,0.7)"}).appendTo("body")},this.redraw=function(){this.cont.find("*").remove();for(var t in this._vals)c=$("<div>").appendTo(this.cont),l=$("<span>").html(t+"&nbsp;: &nbsp;").css("font-weight","bold").appendTo(c),v=$("<span>").text(this._vals[t]).appendTo(c)}}var SL=new StaticLogger;
window.World.addUniformUpdater=function(d,o){this._uniform_updaters[d]=o},window.World.removeUniformUpdater=function(d){delete this._uniform_updaters[d]};
//# sourceMappingURL=data:application/json;base64,