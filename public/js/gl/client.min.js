World=function(){function e(){this.name="Cons"}return e}(),window.World.init=function(e,t){this.__vpx=0,this.auth_hash=e,this.login=t,this.p=new THREE.Projector,this.three_scenes={},this.scenes={},this.flares={},this.actors={},this.actorScene={},this.clock=new THREE.Clock;var i=new THREE.SphereGeometry(5);this.cur=new THREE.Mesh(i),this.vp_width=document.body.clientWidth,this.vp_height=400,this._main_viewport=0,this._additional_vps=[],this.sceneActions={},this._input_keymap={},this._uniform_updaters={};var n=this.vp_height/3,s=this.vp_width/4,h=this.vp_width-s;this._additional_vps_geom=[{l:h,t:2*n,w:s,h:n},{l:h,t:n,w:s,h:n},{l:h,t:0,w:s,h:n}],this._main_vp_geom={l:0,t:0,w:this.vp_width,h:this.vp_height},this.skyboxScenes={},this.skyBoxes={},this.skyBoxCamera={},this.mouse_projection_vec=new THREE.Vector3,SL.init();var r=this;return r.pings=[],r.pings_instability=[],r._time_diffs=[],r.latencities=[],this.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),this.renderer.setSize(this.vp_width,this.vp_height),this.renderer.setClearColor(new THREE.Color(0)),document.body.appendChild(this.renderer.domElement),this.renderer.gammaInput=!0,this.renderer.gammaOutput=!0,this.renderer.autoClear=!1,this.renderer.physicallyBasedShading=!0,this._camera_rot_q=new THREE.Quaternion,document.addEventListener("mousemove",function(e){r.mouse_x=e.x,r.mouse_y=e.y},!1),this.renderer.domElement.addEventListener("mouseup",function(){r.Inputs.input("lmouse",!1)}),this.renderer.domElement.addEventListener("mousedown",function(){r.Inputs.input("lmouse",!0)}),document.addEventListener("keydown",function(e){var t=e.keyCode;r.Inputs.input(t,!0)},!1),document.addEventListener("keyup",function(e){var t=e.keyCode;r.Inputs.input(t,!1)},!1),r.init_socket(),r},window.World.set_actions=function(){self.actions=self._default_actions};
window.World.render=function(e,t){this.redrawSun(e),this.renderer.setViewport(t.l,t.t,t.w,t.h),this.redrawSky(e),this.scenes[e.scene]._action_on_the_run_var&&console.log("render M"),this._cur_cam=e.three_camera,this.renderer.render(this.three_scenes[e.scene],e.three_camera)},window.World.redrawSky=function(e){var t=e.three_camera.parent.matrix.clone(),o=e.three_camera.matrix.clone();t.multiply(o);var r=(new THREE.Matrix4).extractRotation(t),n=(new THREE.Euler).setFromRotationMatrix(r);this.skyBoxCamera[e.scene].rotation.copy(n),this.renderer.render(this.skyboxScenes[e.scene],this.skyBoxCamera[e.scene])},window.World.get_main_viewport=function(){return this._viewports[this._main_viewport]},window.World._init_vps=function(){var e=this._viewports[this._main_viewport],t=this;e.geom={t:0,l:0,w:this.vp_width,h:this.vp_height},e.three_camera=this.makeCamera(e),_.each(e.UIS,function(e){e.construct()}),_.each(e.actors,function(e){var o=t.actorScene[e.GUID],r=t.sceneActions[o][e.control.object_guid][e.control.workpoint];_.each(r,function(e){e.default_key&&(t._input_keymap[e.default_key]=e)})}),this.three_scenes[e.scene].add(this.cur),this.initSpace(e);var t=this;t.Inputs=new Controller.LocalInputActor(t,t.socket),_.each(this._additional_vps,function(e,o){var r=t._viewports[e];r.geom=t._additional_vps_geom[o],r.three_camera=t.makeCamera(r),t.initSpace(r)})},window.World.setupCameras=function(){var e=this;e._viewports={},e._viewport_amount=0;var t=!0;console.log("setting up cameras with",e.actors),_.each(e.actors,function(o){var r=o.control.workpoint,n=e.actorScene[o.GUID];console.log("scenes",e.scenes,n);var i=e.scenes[n].get_object(o.control.object_guid).workpoints[r].views,a=e.scenes[n].meshes[o.control.object_guid],c=a.getUIForWP(r);_.each(i,function(r){var i=n+o.control.object_guid+r;if(t&&(e._main_viewport=i),i in e._viewports){e._viewports[i].actors.push(o);var a=e._viewports[i].UIS;e._viewports[i].UIS=a.concat(c)}else{var s={scene:n,object:o.control.object_guid,camera:r,actors:[o],UIS:c};e._viewports[i]=s,e._viewport_amount+=1}})}),e._init_vps();var o=document.getElementById("viewports-select");o.innerHtml="",_.each(e._viewports,function(e,t){var r=document.createElement("option");r.value=t,r.appendChild(document.createTextNode(e.camera)),o.appendChild(r)})},window.World.redrawSun=function(e){var t=this.scenes[e.scene].meshes[e.object],o=(new THREE.Vector3).fromArray([0,1,0]).multiplyScalar(10);this.flares[e.scene].position=t.position.clone().add(o)},window.World.makeCamera=function(e){var t=this,o=e.scene,r=e.object,n=e.camera,i=t.scenes[o].meshes[r],a=t.scenes[o].get_object(r),c=new THREE.PerspectiveCamera(45,e.geom.w/e.geom.h,1,1e3),s=new THREE.Vector3,_=new THREE.Vector3;s.set.apply(s,a.cameras[n].position),_.set.apply(_,a.cameras[n].direction);var h=new THREE.Vector3(0,0,-1),d=new THREE.Vector3;d.crossVectors(h,_);var m=Math.acos(h.dot(_)/h.length()/_.length());return 0!==d.length()||h.equals(_)||(d=new THREE.Vector3(0,1,0),m=Math.PI),c.rotateOnAxis(d,m),c.position=s,i.add(c),c},window.World.setup_scene=function(e){material=new THREE.MeshBasicMaterial({color:16711680,wireframe:!0});var t=(new THREE.Vector3).fromArray([0,1,0]),o=new THREE.AmbientLight(65793);this.three_scenes[e.GUID].add(o);var r=new THREE.DirectionalLight(16777198,1);r.color.setHSL.apply(r.color,[Math.random(),.8,.9]),r.position=t,this.three_scenes[e.GUID].add(r),this.initSun(e),this.sceneActions[e.GUID]=e.getActions()},window.World.bindCamera=function(){var e=this,t=e.get_current_actor(),o=e.meshes()[t.control.object_guid];o.add(e.camera),e.setCamera()},window.World.go=function(){var e=this;e.setupCameras();var t=function(){_.each(e.scenes,function(e){e.tick()})},o=function(){t();var r=e.get_main_viewport(),n=e._main_vp_geom;_.each(e._uniform_updaters,function(e){e()}),e.mouse_projection_vec.set(e.mouse_x/n.w*2-1,2*-(e.mouse_y/n.h)+1,.99),e.render(r,n),_.each(r.UIS,function(e){e.refresh()}),e.p.unprojectVector(e.mouse_projection_vec,r.three_camera),e.cur.position.copy(e.mouse_projection_vec),_.each(e._additional_vps,function(t,o){var r=e._viewports[t];e.render(r,e._additional_vps_geom[o])}),SL.redraw(),requestAnimationFrame(o)};requestAnimationFrame(o)};
window.World.load_scene=function(e,n){var t=new Scene;t.set_from_json(e),this.scenes[t.GUID]=t,this.three_scenes[t.GUID]=new THREE.Scene,t.load(n,this.three_scenes[t.GUID],this)},window.World.initSun=function(e){var n=new THREE.Color(16777215),t=_.clone([Math.random(),.8,.9]);t[2]+=.5,n.setHSL.apply(n,t);var i=THREE.ImageUtils.loadTexture("/textures/lensflare/lensflare0.png"),s=THREE.ImageUtils.loadTexture("/textures/lensflare/lensflare2.png"),d=THREE.ImageUtils.loadTexture("/textures/lensflare/lensflare3.png"),r=new THREE.LensFlare(i,700,0,THREE.AdditiveBlending,n);r.add(s,512,0,THREE.AdditiveBlending),r.add(s,512,0,THREE.AdditiveBlending),r.add(s,512,0,THREE.AdditiveBlending),r.add(d,60,.6,THREE.AdditiveBlending),r.add(d,70,.7,THREE.AdditiveBlending),r.add(d,120,.9,THREE.AdditiveBlending),r.add(d,70,1,THREE.AdditiveBlending);var a=function(e){var n,t,i=e.lensFlares.length,s=2*-e.positionScreen.x,d=2*-e.positionScreen.y;for(n=0;i>n;n++)t=e.lensFlares[n],t.x=e.positionScreen.x+s*t.distance,t.y=e.positionScreen.y+d*t.distance,t.rotation=0;e.lensFlares[2].y+=.025,e.lensFlares[3].rotation=.5*e.positionScreen.x+THREE.Math.degToRad(45)};r.customUpdateCallback=a,r.position=(new THREE.Vector3).fromArray([0,1,0]).multiplyScalar(500),this.three_scenes[e.GUID].add(r),this.flares[e.GUID]=r},window.World.initSpace=function(e){var n="/textures/space/m01_cube",t="png",i=[n+".px."+t,n+".nx."+t,n+".py."+t,n+".ny."+t,n+".pz."+t,n+".nz."+t],s=THREE.ImageUtils.loadTextureCube(i),d=THREE.ShaderLib.cube;d.uniforms.tCube.value=s;var r=new THREE.ShaderMaterial({fragmentShader:d.fragmentShader,vertexShader:d.vertexShader,uniforms:d.uniforms,depthWrite:!1,side:THREE.BackSide});this.skyboxScenes[e.scene]=new THREE.Scene;var a=new THREE.Mesh(new THREE.CubeGeometry(9e3,9e3,9e3),r);this.skyBoxes[e.scene]=a,this.skyBoxCamera[e.scene]=new THREE.PerspectiveCamera(45,e.geom.w/e.geom.h,1,1e4),this.skyboxScenes[e.scene].add(a)},window.World.make_main=function(){var e=document.getElementById("viewports-select");this._main_viewport=e.options[e.selectedIndex].value,this._init_vps()},window.World.add_icon=function(){var e=document.getElementById("viewports-select");add_vp=e.options[e.selectedIndex].value,3==this._additional_vps.length?this._additional_vps[2]==add_vp:this._additional_vps.push(add_vp),this._init_vps()},window.World.meshes=function(){return this.scene.meshes},window.World.controllable=function(){var e=this.get_main_viewport();return this.scenes[e.scene].meshes[e.object]},window.World.mesh_for=function(e){return this.meshes()[this.scene.actors[e].control.object_guid]},window.World.get_current_actor=function(){var e=this;return e.scene.actors[e.login]};
function socketService(e){function t(){return a+=1,a%1e4}var n=function(e){var t=(Q.defer(),new XMLHttpRequest);t.open("GET","/my-auth-hash/",!0),t.send(),t.onreadystatechange=function(){if(4==t.readyState&&200==t.status){var n=JSON.parse(t.responseText);e(n)}}},c=io.connect(),i=!1,s=[];is_authenticated=Q.defer(),c.on("connected",function(){n(function(e){c.emit("auth_hash",{auth:e.hash})})}),c.on("auth_completed",function(e){e.err?is_authenticated.reject(e.err):is_authenticated.resolve(!0)}),is_authenticated.promise.then(function(){i=!0;for(var e=0;e<s.length;e++)c.emit(s[e].T,s[e].p)});var o={},r={},a=0,u=function(e,n,o){var a=Q.defer(),u=t();r[u]={cb:a};var f={p:o};return f.cbix=u,f.T=n,i?c.emit(e,f):s.push({T:e,p:f}),a.promise},f=["Q","R","S"];return _.each(f,function(e){c.on(e,function(e){var t=e.cbix;r.hasOwnProperty(t)&&(r[t].cb.resolve(e.d),delete r[t])})}),c.on("F",function(t){e("F",t)}),c.on("ALM",function(t){e("ALM",t)}),o.get=function(e,t){return u("Q",e,t)},o.sync=function(){return u("S","",{})},o.request=function(e,t){return u("R",e,t)},o.action=function(e){c.emit("A",e)},o}window.World.init_socket=function(){var e=window.location.origin,t=io.connect(e);this.socket=t;var n=this;this.socket_srv=socketService(function(e,t){switch(e){case"ALM":void 0!==n.scenes[t.scene]&&n.scenes[t.scene].sync(t.almanach);break;case"F":n.scenes[t.s].addNetworkMessage(t.a)}});var c=[];this.socket_srv.request("CTX",{user_id:!0}).then(function(e){n.syncTime();var t=0,i=0;_.each(e.contexts,function(e,s){var o=e.GUID;if(-1===c.indexOf(o)){c.push(o),t+=1;var r=e.objects,a=e.actors,u=[];console.log("Ok?",e),e.location.g.orbit&&u.push(n.socket_srv.get("celectial-recursive",{GUID:e.location.g.orbit.C})),_.each(r,function(e){var t=n.socket_srv.get("A",{id:e}).then(function(e){return n.socket_srv.get("T",{type:e.ship_type}).then(function(t){return e.ship_type=t,e})});u.push(t)}),Q.all(u).then(function(e){n.celestials={},_.each(e[0],function(e){n.celestials[e.GUID]=e}),e.splice(0,1);n.three_scenes[o]=new THREE.Scene;var c=new Scene(n.three_scenes[o],n);c.GUID=o,c.onLoadCallback=function(){n.setup_scene(c),i+=1,i===t&&(console.info("all_loaded"),n.go())},n.scenes[o]=c,_.each(a,function(e){e.GUID===s&&(n.actors[s]=e,n.actorScene[s]=o),c.join_actor(e)}),_.each(e,function(e){c.join_object(e,e.GUID)})}).catch(function(e){console.error(e.stack)})}})})},window.World.syncTime=function(){this._sync_timestamp=(new Date).getTime();var e=this,t=50;this.socket_srv.sync().then(function(n){var c=(new Date).getTime(),i=c-e._sync_timestamp;e.latencities.push(i/2),e.avg_latencity=Math.floor(_.reduce(e.latencities,function(e,t){return e+t},0)/e.latencities.length);var s=n.ts-e._sync_timestamp;e._time_diffs.push(s),e._time_diffs.length>t&&e._time_diffs.splice(0,1),e._time_diff=_.reduce(e._time_diffs,function(e,t){return e+t},0)/e._time_diffs.length,e.max_ping=_.max(e.pings),setTimeout(function(){e.syncTime()},1e3)}).catch(function(e){console.log(e.stack)})},window.World.sendAction=function(e,t){var n=_.clone(t);n.ts+=this._time_diff,n.p=JSON.stringify(n.p),delete n.vector,this.socket_srv.action({s:e,a:n})};
function StaticLogger(){this._vals={},this.setValue=function(t,i){this._vals[t]=i},this.init=function(){this.cont=$("<div>").css({position:"fixed",top:0,right:0,width:400,bottom:0,"background-color":"rgba(0,200,100,0.7)"}).appendTo("body")},this.redraw=function(){this.cont.find("*").remove();for(var t in this._vals)c=$("<div>").appendTo(this.cont),l=$("<span>").html(t+"&nbsp;: &nbsp;").css("font-weight","bold").appendTo(c),v=$("<span>").text(this._vals[t]).appendTo(c)}}var SL=new StaticLogger;
window.World.addUniformUpdater=function(d,o){this._uniform_updaters[d]=o},window.World.removeUniformUpdater=function(d){delete this._uniform_updaters[d]};
//# sourceMappingURL=data:application/json;base64,