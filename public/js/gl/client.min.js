var CelestialCalculatorGetter = (function(){

    var CelestialCalculator = function(){
        this.celestials = {};
        this.positions = {};
        
        this.addCelestial = function(celestialDescription, timeOut){
            this.celestials[celestialDescription.GUID] = celestialDescription;
            this.celestials[celestialDescription.GUID].timeout = timeout;
            this.celestialNames[celestialDescription.name] = celestialDescription.GUID;

        }
        this.getRelatedPosition = function( position, celestialName ){
            var celestialPosition = this.getPosition(celestialName);
            return celestialPosition.sub(position);
        }

        this.getPosition = function(celestialName){
            var guid = this.celestialNames[celestialName];
            
            var position = this._getPosition(guid);
        }
        this._getPosition(guid){
            var n = Date.now();
            var c = this.celestials[guid];
            var t = c.timeout;
            var pos = this.positions[guid];
            if(n - pos.time > t){
                pos = {vector: this._calculate(guid),
                       time:n
                };
                this.positions[guid] = pos;
            }
            return this.positions[guid].vector;
           
        }
        this._calculate = function(guid){
            var C = this.celestials[guid];
            if(C.orbit){
                var position = this._position(C); // Zero-relative;
            }else{
                return position;
            }
        }
        this._calcE = function(e, M, accuracy){
            var Enew=1;
            var Eold=0;
            var Etemp=0;
            var E=0;
            //change the value in the next line for different accuracy
            //of value of E found from M
            while(Math.abs(Enew-Eold) > accuracy){
                Etemp=Enew;
                Enew=M+e*Math.sin(Eold);
                Eold=Etemp;
            }
            E=Enew;
            return E;
        }

        this.trueAnom = function (ec,E,dp) {

            var S=Math.sin(E);

            var C=Math.cos(E);

            var fak=Math.sqrt(1.0-ec*ec);

            var phi=Math.atan2(fak*S,C-ec) //  /K;

            return Math.round(phi*Math.pow(10,dp))/Math.pow(10,dp);

        }
        this._planeCoords = function(celestial, time){

            if(celestial.orbit == undefined){
                console.error("orbit is not defined for", celestial.name);
                return;
            }


            var ph = celestial.orbit.t0 ; // + time of last sightSeeing
            var e = celestial.orbit.e;
            if(e == undefined ){ e = 1.0; }
            var a = celestial.orbit.a;
            var ptime = time + ph;
            var T = celestial.orbit.T ;
            //var M =  -Math.PI/2 + ptime * Math.PI / (T/2) ;
            var M = ptime * Math.PI / (T/2) ;
            //  console.log("M", M);
            var E = this._calcE(e, M, 0.0000001) ;
            var phi = this.trueAnom(e, E, 7) ;
            var R   = a*(1-e*e)/(1+e*Math.cos(phi));
            phi += celestial.orbit.P;
            var pos = new THR.Vector3(R * Math.cos(phi), R* Math.sin(phi), 0);
            return pos;
        }

        this._position = function(celestial, time){
            if(celestial.orbit == undefined){
                console.error("orbit is not defined for", celestial.name);
                return;
            }
            var m = this._getRotationMatrix(celestial.orbit.n);
            var q = new THR.Quaternion();
            q.setFromRotationMatrix(m);
            var pos = this._planeCoords(celestial, time);
            pos.applyQuaternion(q);
            return pos;
        }
        this._getRotationMatrix = function(normal){
            // rotation relative to z axis;
            var n = new THR.Vector3().fromArray(normal);
            n.normalize();
            var Z = new THR.Vector3(0,0,-1);
            var axis = Z.clone().cross(n.clone() ) ;
            axis.normalize();
            var angl = Math.acos(Z.dot(n));
            var m = new THR.Matrix4();
            m.makeRotationAxis(axis, angl);
            return m;
        }

    }

    var ccc = null;

    return function(){
        if(ccc == null){
            ccc = new CelestialCalculator();
        }
    }



})()

var CustomUpdaterGetter = (function (){
    
    var customUpdaterCache = null;

    var CustomUpdater = function(){
        this.updaterList = {};
        this.add = function( name, updater ){
            this.updaterList[name] = updater;
        }
        this.remove = function(name){
            delete this.updaterList[name]
        }
        this.update = function(){
            _.each(this.updaterList, function(func, name){
                func();
            })
        }
    }
    var updaterGetter = function(){
        if(customUpdaterCache == null){
            customUpdaterCache = new CustomUpdater();
        }
        return customUpdaterCache;
    }
    return updaterGetter;
})()

window.GameContextLoader = function(socketService){

    var scenePromises  = [];
    var celestialPromises = [];

    var scenes_in_process = [];

    var contextActors = [];
    var returnDefer = Q.defer();

    socketService.request("CTX", {user_id:true})
        .then(function(context){
            console.log("CONTEXT", context);
            _.each(context.contexts, function(scene_desc, actor_guid){
                var objectPromises = [];
                contextActors.push(actor_guid);
                var scene_guid = scene_desc.GUID;
                var sceneDef = Q.defer();
                if(scenes_in_process.indexOf( scene_guid  ) !== -1){
                    return;
                }else{

                    scenes_in_process.push(scene_guid);
                    scenePromises.push(sceneDef.promise)
                }
                var objects = scene_desc.objects;
                var scene_actors = scene_desc.actors;
                if(scene_desc.location.g.orbit){
                    celestialPromises.push(
                        socketService.get("celectial-recursive", {GUID: scene_desc.location.g.orbit.C})
                    );
                }
                _.each(objects, function(oguid) {
                    var p = socketService.get("A", {id: oguid})
                        .then(function (obj) {
                            return socketService.get("T", {type: obj.sub_type})
                                .then(function (t) {
                                    obj.sub_type = t;
                                    return obj;
                                })
                        });
                    objectPromises.push(p);
                });
                Q.all(objectPromises).then(function(objects){
                    console.log("II", objects);
                    var threeScene =  new THREE.Scene();
                    var scene = new Scene(threeScene, self);
                    scene.GUID = scene_guid;
                    scene.onLoadCallback = function(){
                        sceneDef.resolve({
                            scene:scene,
                            threeScene: threeScene,
                            actors: scene_desc.actors
                        });
                    };
                    _.each(scene_actors, function(act){
                        scene.join_actor(act);
                    });

                    _.each(objects, function(obj){
                        scene.join_object(obj, obj.GUID);
                    });
                }).catch(function(e){
                    console.error(e);
                });
            });

            if( scenePromises.length == 0){
                returnDefer.reject("No scenes to load");
            }else{
                Q.all( scenePromises).then(function(scenes){
                    returnDefer.resolve({scenes:scenes, currentUserActors: contextActors});
                });
            }

        })
        .catch(function(e){
            console.error(e);
        });




    return returnDefer.promise;

}

var KeyMapper = function( viewPorts){
    this.viewPorts = viewPorts
    _.each(this.viewPorts, function(vp){
        if(vp.doDrawUI()){
            vp.view.actors
        }
    })

    

}

var InputServiceGetter = (function(){
    var InputService = function( ){
        var mouseState = {x:0, y:0};
        this.mouseState = mouseState;
        var that = this;
        document.addEventListener( 'mousemove', function(e){
            mouseState.x = e.x;
            mouseState.y = e.y;
        }, false );
        RendererGetter().domElement().addEventListener('mouseup', function(e){
            that.input( 'lmouse', false)
            
        });
        RendererGetter().domElement().addEventListener('mousedown', function(e){
            that.input( 'lmouse', true)
        });
        document.addEventListener('keydown', function(e){
            var code = e.keyCode;
            that.input( code, true)
        }, false);
        document.addEventListener('keyup', function(e){
            var code = e.keyCode;
            that.input(code, false)
        }, false);
        this.keyCodes = {};
        this.keyMap = null;
        this.setKeyMap = function(keyMap){
            this.keyMap = keyMap;
        }
        this.viewportService = ViewportServiceGetter()

        this.getMouseProjectionArray = function(){
            return this.viewportService.project(this.mouseState);
        }
        this.viewports = null;
        this.setActiveScene = function(scene){
            this.scene = scene;

        }
        this.input = function(keycode, up_or_down){
            var ts = new Date().getTime();
            if(up_or_down) {// down == true
                this.keyCodes[keycode] = {in_action:true, ts:ts};
            }else{
                if(this.keyCodes[keycode]){
                    var t = this.keyCodes[keycode].ts;
                    this.keyCodes[keycode].in_action = false;
                    this.keyCodes[keycode].ts = ts;
                    this.keyCodes[keycode].delta = ts - t;
                }
            }
        }
        var syncronizer = SynchronizerGetter();
        this.getLatestActions = function( sceneGuid, now ){
            if( this.scene.sceneGuid != sceneGuid){
                console.info("wrong scene for input");
                return [] ;
            }
            if(this.keyMap == null){ 
                console.warn("no keymap");
                return; 
            }
            var actions = [];
            var that = this;
            _.each(this.keyCodes, function(k_action, keycode){
                if(k_action.in_action){
                    var delta = now - k_action.ts;
                    var ts = now;
                    k_action.ts = now;
                }else{
                    var delta = k_action.delta;
                    var ts = k_action.ts;
                    delete this.keyCodes[keycode];
                }
                var action = _.clone(self.actions[keycode]);
                if(keycode in that.keyMap){
                    var act_desc  = that.keyMap[keycode];
                    var new_action = {
                        mesh : act_desc.mesh,
                        dev : act_desc.device,
                        name: act_desc.name,
                        ts :ts,
                        ident: ts + synchronizer.getCurrentTimeDiff() + synchronizer.getAverageLatencity(),
                        delta: delta/1000,
                        wmouse: that.getMouseProjectionArray()
                    }
                    actions.push(new_action);
                }
            });
            return actions;
        }
    };
    var InputServiceCache = null;
    var getter = function(){
        if(InputServiceCache == null){
            InputServiceCache = new InputService();
        }
        return InputServiceCache;
    }
    return getter;
})();


window.RendererGetter = (function(){
    "use strict";
    var Renderer = function(){
        var width   = document.body.clientWidth;
        var body = document.body,
            html = document.documentElement;
        var height = Math.max( body.scrollHeight, body.offsetHeight, 
                               html.clientHeight, html.scrollHeight, 
                               html.offsetHeight );

        this.height = height;
        this.width = width;
        console.info('Init renderer', width, height, document.body);
        this.glRenderer = new THREE.WebGLRenderer({antialias:true, alpha:true});
        this.glRenderer.setSize( width, height );
        this.glRenderer.setClearColor(new THREE.Color(0x000000));
        document.body.appendChild(this.glRenderer.domElement);

        this.glRenderer.gammaInput = true;
        this.glRenderer.gammaOutput = true;
        this.glRenderer.autoClear = true ;

        this.glRenderer.physicallyBasedShading = true;
        
                                            


        this.domElement = function(){
            return this.glRenderer.domElement;
        }

        this.render = function ( viewPort ){
            this.glRenderer.setViewport(viewPort.config.l, viewPort.config.t, viewPort.config.w, viewPort.config.h)
            this.renderSkyBox();
            this.renderCelestialScene();
            this.renderScene( viewPort );
        }

        this.renderSkyBox = function( viewport ){
            var matrixOfPlayer = viewport.camera.parent.matrix.clone();
            var matrixOfCamera = viewport.camera.matrix.clone();
            matrixOfPlayer.multiply(matrixOfCamera);
            var rotationMatrix = new THREE.Matrix4().extractRotation(matrixOfPlayer);
            var q = new THREE.Quaternion().setFromRotationMatrix(rotationMatrix);
            viewport.skyBoxCamera.rotation.setFromQuaternion(q);


            
            // console.warn("Skybox is not rendered yet");
        }
        this.renderCelestialScene = function(){
            // console.warn("Celestial objects is not rendered yet");
        }
        this.renderScene = function(viewport){
            var scene = viewport.view.scene.three_scene;
            var camera = viewport.camera;
            this.glRenderer.render(scene, camera);
        }
         
    }

    var sc = null;
    return function(){
        if(sc == null ){
            sc = new Renderer();
        }
        return sc;
    }

})();

var Settings = (function(){

    var Service = function(){
        var USER_SETTINGS_KEY = "user-settings";
        var settings = JSON.parse(localStorage.getItem(USER_SETTINGS_KEY));
        if(settings){
            this.config = settings;
        }else{
            this.config = {};
        }


        this.getViewportBindings = function(){
            if (!(this.config['viewPortBindings'] )){
                this.config.viewPortBindings = this.defaultViewPortBindings;
                localStorage.setItem(USER_SETTINGS_KEY, JSON.stringify( this.config ));
            }
            return this.config.viewPortBindings
        }
        this.defaultViewPortBindings = {
            "ship.rookie_ship.Piloting.front" : "default"
        }
    }
    var sc = null;
    return function(){
        if(sc == null){
            sc = new Service();
        }
        return sc;
    }


})()


var SocketServiceGetter = (function(){
    "use strict";
    var SocketService = function(){
        var authHashF = function(cb){
            var d = Q.defer();
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '/my-auth-hash/', true);
            xhr.send();

            xhr.onreadystatechange = function() {
                if (xhr.readyState == 4) {
                    if(xhr.status == 200) {
                        var js = JSON.parse(xhr.responseText);
                        cb(js);
                    }
                }
            };
        };
        var socket = io.connect();
        var is_ready = false;
        var Queue = [];

        var is_authenticated = Q.defer();
        socket.on('connected', function(){
            //console.log("reconnection");
            authHashF(function(json){
                // console.log(">>>",json);
                socket.emit("auth_hash", {auth: json.hash});
            })
        });
        socket.on("auth_completed", function(msg){
            if(msg.err){
                is_authenticated.reject(msg.err);
            }else{
                //console.log(">>");
                is_authenticated.resolve(true);
                //$rootScope.$apply(function(){is_authenticated.resolve(true)})
            }

        });
        // console.log(is_authenticated);
        is_authenticated.promise.then(function(s,e){
            // console.log(is_authenticated, s,e);
            is_ready = true;
            for(var i =0;i <Queue.length; i++){
                socket.emit(Queue[i].T, Queue[i].p);
            }
        });

        var S = {};
        var cbs = {};
        var incomingListeners = {};
        var curcbix = 0;
        function getCBIx(){
            curcbix+=1;
            return curcbix % 10000;
        };

        var Req = function(mt, t, p){
            var d = Q.defer(),
                cbix =  getCBIx();
            cbs[cbix] = {
                cb: d
            };
            var o = {p:p};
            o.cbix = cbix;
            o.T = t;
            if(!is_ready){
                Queue.push({T:mt,p:o});
            }else{
                socket.emit(mt, o);
            }

            return d.promise;
        };

        var messages_to_hear = ["Q", "R", 'S'];
        _.each(messages_to_hear, function(message_type){
            socket.on(message_type, function(msg){
                var cbix = msg.cbix;
                if(cbs.hasOwnProperty(cbix)) {
                    cbs[cbix].cb.resolve(msg.d);
                    delete cbs[cbix];
                }else{
                    console.warn("No such cbix in callbacks", cbix, message_type );
                }
            })

        });

        var specialEvents = ["F", "ALM"];

        _.each(specialEvents, function(event){
            socket.on(event, function(data){
                if(event in incomingListeners){
                    _.each(incomingListeners[ event ], function(listener){
                        listener(event, data);
                    })
                }
            });

        });
        S.get = function(t,p){
            return Req("Q", t,p)
        };
        S.sync = function(){
            return Req("S",'',{})
        };
        S.request = function(t,p){
            return Req("R", t,p)
        };
        S.action =function(mess){
            socket.emit("A",mess)
        };
        S.addListener = function(event, func){
            if(!(event in incomingListeners)){
                incomingListeners[event] = [];
            }
            incomingListeners[event].push(func);
        }
        return S;
    };

    var socketServiceCache = null;
    var getter = function(){
        if( socketServiceCache == null ) {
           socketServiceCache = SocketService();
        }
        return socketServiceCache;
    }
    return getter;
})();

var SynchronizerGetter = (function(){

    var synchronizerCache = null;

    var Synchronizer = function(socketService){
        var MAX_DIFF_LENGTH = 10;
        var DROP_FIRST_DIFFS = 4;
        var SYNC_TIMEOUT = 1000;
            
        var that = this;

        this.lastTimestamp = 0;
        this.latencities = []
        this.timeDiffs = [];
        this.diffCount = 0;
        this.isStopped = false;
         

        this.socketSyncClosure = function(syncData){
            var currentTimeStamp = Date.now();
            var ping = currentTimeStamp - that.lastTimestamp;
            that.latencities.push(ping / 2);
            that.averageLatencity = Math.floor(that.average(that.latencities) );
            var timeDiff = syncData.ts - that.lastTimestamp;
            that.diffCount += 1;
            if(DROP_FIRST_DIFFS > that.diffCount){
                that.timeDiffs.push(timeDiff);
            }
            if(that.timeDiffs.length > MAX_DIFF_LENGTH){that.timeDiffs.splice(0,1) }
            that.timeDiff = that.average(that.timeDiffs);
            if(! that.isStopped ){
                setTimeout(function(){
                    that.syncLoop();
                }, SYNC_TIMEOUT);
            };
        }

        this.average = function(array){
            return _.reduce(array, function(a,b){return a+b}, 0) / array.length;
        }
        
        this.syncLoop = function(){
            // console.info("sync");
            this.lastTimestamp = Date.now();
            socketService.sync( ).then( this.socketSyncClosure );
        }
        
        this.getCurrentTimeDiff = function(){
            return this.timeDiff;
        }
        this.getAverageLatencity = function(){
            return this.averageLatencity;
        };
        this.start = function(){
            if (this.isStopped){
                this.isStopped = false;
                this.syncLoop();
            }
             
        }
        this.stop = function(){
            this.isStopped = true;
             
        }
    }
    var getter = function(){
        if(synchronizerCache == null){
            synchronizerCache = new Synchronizer( SocketServiceGetter() );
        }

        return synchronizerCache;
    }
    return getter;

})()

window.View = function(scene, viewName, controllableObject, controllabelMesh){
    this.actors = {};
    this.UIS = [];
    this.scene= scene;
    this.viewName = viewName;
    this.object = controllableObject;
    this.mesh = controllabelMesh;

    this.skyboxScene = new THREE.Scene();
    this.celestialScene = new THREE.Scene();


    this.bind = function(vp){
        this.viewport = vp;
    }
    this.unbindViewport = function(){
        this.mesh.remove(this.viewport.camera)
        this.viewport = undefined;
    }


    this.addActor = function( actor ){
        this.actors[actor.GUID] = actor;

    };
    this.addUI = function( ui ){
        this.UIS.push( ui );
    }


}

var ViewCollection = function(){
    this.views={},
    this.viewOrder= [],
    this.identityMap = {},
    this.byGlobalName ={},
    this.add= function(identity, globalName ,view, actor, UI){
        if(!(identity  in this.views)){
            this.views[identity] = view;
            this.viewOrder.push(identity);
        }
        this.byGlobalName[globalName] = view;
        this.views[identity].addActor( actor );
        this.views[identity].addUI( UI );
    },
    this.get= function(id){
        return this.views[id];

    },
    this.getByGlobalName = function(name){
        return this.byGlobalName[name];
    },
    this.getIx =function(ix){
        var n = this.viewOrder[ix];
        return this.get(n);
    }

}

window.Viewport = function( config ){

    this.config = config;
    this.name = config.name;
    this.keyMap = {};
    this.actions = {};


    this.doDrawUI = function(){
        return this.config.drawUI;
    };

    this.makeCamera = function(){
        var cameraBaseVector = new THREE.Vector3(0,0,-1);
        console.log("making camera" , this.config);
        var camera = new THREE.PerspectiveCamera(45, this.config.w / this.config.h, 1, 1000);
        var axis = new THREE.Vector3();
        var vpRotation = this.view.object.cameras[this.view.viewName].direction;
        var vpPosition = this.view.object.cameras[this.view.viewName].position;

        axis.crossVectors(cameraBaseVector, new THREE.Vector3().fromArray(vpRotation) );
        var rotAngle = Math.acos(cameraBaseVector.dot(new THREE.Vector3().fromArray( vpRotation) ) );
        camera.position.fromArray(vpPosition);


        camera.rotateOnAxis(axis, rotAngle);
        this.camera = camera;
        this.skyBoxCamera    = new THREE.PerspectiveCamera(45, this.config.w / this.config.h, 1, 1000) 
        this.celestialCamera = new THREE.PerspectiveCamera(45, this.config.w / this.config.h, 1, 1000) 
        this.view.mesh.add(camera);
    }

    this.bind = function( view ){
        console.info("BIND", this.view);
        if(this.view){
            this.view.unbindViewport();
        }

        this.view = view;
        var that = this;
        _.each(view.actors, function(a){
            var actions = view.scene.getActions()[a.control.object_guid];
            _.each(actions, function(action){
                if(action.default_key){
                    that.keyMap[action.default_key] = action;
                }
                that.actions[action.name] =  action;
            })
        });
        this.makeCamera();
        this.view.bind(this);
    }

    this.unprojectCoords = function(x, y){
        var vpGeometry = this.config;
        var vpX = x - vpGeometry.l;
        var vpY = y - vpGeometry.t;
        var X = (vpX / vpGeometry.w *2) -1;
        var Y = (vpY / vpGeometry.h *2) +1;
        var result = new THREE.Vector3(X, Y, 0.99 )
        this.projector.unprojectVector(result, this.camera);
        return result.clone();
    }
}

var ViewportServiceGetter = (function(){

    var Service = function(){
        this.viewports = {};
        this.renderer = RendererGetter();

        this.readConfig = function(){
            var w34 = this.renderer.width/4 * 3;
            var w4  = this.renderer.width/4;
            var h3  = this.renderer.height/2;

            return [
                {
                    l:0, t:0, 
                    w:this.renderer.width, h:this.renderer.height, 
                    drawUI: true, name:"default"
                },
                {l:w34, t:h3*2, w:w4, h:h3, name:"topleft"},
                {l:w34, t:h3, w:w4, h:h3, name:"centerleft"},
                {l:w34, t:0, w:w4, h:h3, name:"bottomleft"}
            ];
        }
        this.setup = function(){
            var that = this;
            _.each(this.readConfig(), function(config){
                var viewport = new Viewport(config);
                that.viewports[config.name] = viewport;
            });
        }
        this.project = function( mouseState ){
            console.warn("mouse projection over viewports is not implemented");
        }

    
        this.getViewports= function(){
            return this.viewports; 
        }
        this.bindViews = function( viewsCollection ){
            var bindConfig = Settings().getViewportBindings();
            var that = this;
            _.each(bindConfig, function(viewportName, bindString ){
                var vp = that.viewports[viewportName];
                var v  = viewsCollection.getByGlobalName(bindString);
                vp.bind( v );
            })
            // InputServiceGetter().setViewports( this.getViewports());
            InputServiceGetter()
            .setActiveScene( this.viewports["default"].view.scene);


        }
    }

    var sc = null;
    return function(){
        if(sc == null){
            sc = new Service();
        }
        return sc;
    }
   

})()

window.World = function(auth_hash, user_id){
    this.auth_hash = auth_hash;
    this.user_id = user_id;

    this.isStopped = false; 


    this.initRenderer();
    this.initCustomUpdater();
    this.setupViewports();

    var checkContext = function(){
        var that = this;

        this.startSceneLoading()
        .then(function(){
            console.info("Go loading");
            that.initViews();
            console.info("Views inited");
            that.initSyncing();
            console.info("Syncing inited");
            that.setupNetworkListeners();
            console.info("network listeners set up");
        })
        .then(function(){
            console.info("Go simulation");
            that.startSimulation();
        })
        .fail(function(reason){
            console.warn( reason );
            setTimeout( checkContext, 3000 );
            that.clear();
            delete that;

        })
        .catch(function(e){
            console.error(e);
            that.clear();
        }).done();
    };

    checkContext = checkContext.bind(this);
    checkContext();

};

window.World.prototype = _.extend(window.World.prototype, {
    
    clear: function(){
        if (this.scenes){
            console.info('clearing scenes');
            for (var i in this.scenes){
                this.scenes[i].clear();
                this.scenes[i]= null;
                delete this.scenes[i];
            }
            
        }

        if(! (this.synchronizer)){
            this.synchronizer = SynchronizerGetter();

        }
        this.synchronizer.stop();

    },
    initRenderer : function(){
        this.renderer = new RendererGetter();
    },
    setupViewports : function(){
        this.viewportService = ViewportServiceGetter();
        this.viewportService.setup();

    },

    startSceneLoading : function(){
        var scenePromise = GameContextLoader ( SocketServiceGetter() )
        var that = this;
        that.scenes = {};
        that.actors = {};
        that.actorScene = {};
        return scenePromise.then(function(context){
            _.each(context.scenes, function(sceneDescription){
                that.scenes[sceneDescription.scene.GUID] = sceneDescription.scene;
                _.each(sceneDescription.actors, function(actor){
                    if(context.currentUserActors.indexOf(actor.GUID) !== -1){ // actor.GUID in context.currentUserActors
                        that.actors[actor.GUID] = actor;
                        that.actorScene[actor.GUID] = sceneDescription.scene;
                    }
                });
            });
        })
    },

    initViews: function(){
        var that = this;
        var viewCollection = new ViewCollection();
        _.each(this.actors, function(actor){
            var scene = that.actorScene[actor.GUID];
            var views = scene
                .get_object(actor.control.object_guid)
                .workpoints[actor.control.workpoint].views;
            var object = scene.get_object(actor.control.object_guid)
            var mesh = scene.meshes[actor.control.object_guid];
            var uis = mesh.getUIForWP(actor.control.workpoint);
            _.each(views, function(viewName){
                var viewGlobalName = [object.type, object.sub_type, actor.control.workpoint, viewName].join('.');
                var viewIdentity = scene.GUID + actor.control.object_guid + viewName;
                var view = new View(scene, viewName, object, mesh );
                viewCollection.add(viewIdentity, viewGlobalName, view, actor, uis );

            });

        });

        this.viewCollection = viewCollection;
        this.viewportService.bindViews(this.viewCollection);

    },

    initSyncing: function(){

        console.info("Syncronizer inited");

        this.synchronizer = SynchronizerGetter();
        this.synchronizer.start();
    },

    setupNetworkListeners: function(){

        var socketService = SocketServiceGetter();
        var that = this;
        socketService.addListener("F", function( data ){
            if(data.scene in that.scenes){
                that.scenes[data.scene]
                    .addNetworkMessage(data.a)
            }

        });
        socketService.addListener("ALM", function( data ){
            if(data.scene in that.scenes){
                that.scenes[data.scene].sync(data.almanach);
            }
        });
    },
    initCustomUpdater : function(){
    
        this.customUpdaters = CustomUpdaterGetter();
    },
    makeSceneTicks : function(){
        _.each(this.scenes, function( scene, guid ){
            scene.tick();
        })
    },
    animate: function(){
        this.makeSceneTicks();
        this.customUpdaters.update();
        var that = this;
        _.each(this.viewportService.getViewports(), function(viewPort){
            // console.log("animate");
            if(viewPort.view){
                that.renderer.render(viewPort);
            }
        })
        if(!this.isStopped){
            requestAnimationFrame(this.animate.bind(this) );

        }
            

    },
    startSimulation: function(){
        if(this.isStopped){
            this.isStopped = false;
        }
        requestAnimationFrame(this.animate.bind(this));
    },
    stopAnimation : function(){
        this.isStopped = true;
    }
});

(function (){
    var StaticLogger = function(){
        this._vals = {}
        this.setValue = function(param, val){
            // console.log(param, val);
            this._vals[param] = val;
        }
        this.init = function(){
            this.cont = $("<div>").css({
                'position':'fixed',
                'top':0,
                'right':0,
                'width':400,
                'bottom':0,
                'background-color':"rgba(0,200,100,0.7)"
            }).appendTo('body');
            // 	console.log(this.cont);

        }
        this.redraw = function(){
            this.cont.find('*').remove();
            //console.log(this._vals);
            for(var i in this._vals){
                //console.log('asda');
                c = $('<div>').appendTo(this.cont)
                l = $('<span>').html(i + "&nbsp;: &nbsp;").css('font-weight','bold').appendTo(c);
                v = $('<span>').text( this._vals[i] ).appendTo(c);
            }
        };
    }
    window.SL = new StaticLogger();

})();


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNlbGVzdGlhbENhbGN1bGF0b3JHZXR0ZXIuanMiLCJDdXN0b21VcGRhdGVyLmpzIiwiR2FtZUNvbnRleHRMb2FkZXIuanMiLCJLZXlNYXBwZXIuanMiLCJLZXlTdGF0ZU1hbmFnZXIuanMiLCJOZXR3b3JrTWFuYWdlci5qcyIsIlJlbmRlcmVyLmpzIiwiU2V0dGluZ3MuanMiLCJTb2NrZXRTZXJ2aWNlR2V0dGVyLmpzIiwiU3luY2hyb25pemVyLmpzIiwiVmlldy5qcyIsIlZpZXdDb2xsZWN0aW9uLmpzIiwiVmlld3BvcnQuanMiLCJWaWV3cG9ydFNlcnZpY2VHZXR0ZXIuanMiLCJXb3JsZC5qcyIsInN0YXRpY0xvZ2dlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDeElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN0RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDckdBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3RFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDcklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDckxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiY2xpZW50Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBDZWxlc3RpYWxDYWxjdWxhdG9yR2V0dGVyID0gKGZ1bmN0aW9uKCl7XG5cbiAgICB2YXIgQ2VsZXN0aWFsQ2FsY3VsYXRvciA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuY2VsZXN0aWFscyA9IHt9O1xuICAgICAgICB0aGlzLnBvc2l0aW9ucyA9IHt9O1xuICAgICAgICBcbiAgICAgICAgdGhpcy5hZGRDZWxlc3RpYWwgPSBmdW5jdGlvbihjZWxlc3RpYWxEZXNjcmlwdGlvbiwgdGltZU91dCl7XG4gICAgICAgICAgICB0aGlzLmNlbGVzdGlhbHNbY2VsZXN0aWFsRGVzY3JpcHRpb24uR1VJRF0gPSBjZWxlc3RpYWxEZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIHRoaXMuY2VsZXN0aWFsc1tjZWxlc3RpYWxEZXNjcmlwdGlvbi5HVUlEXS50aW1lb3V0ID0gdGltZW91dDtcbiAgICAgICAgICAgIHRoaXMuY2VsZXN0aWFsTmFtZXNbY2VsZXN0aWFsRGVzY3JpcHRpb24ubmFtZV0gPSBjZWxlc3RpYWxEZXNjcmlwdGlvbi5HVUlEO1xuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nZXRSZWxhdGVkUG9zaXRpb24gPSBmdW5jdGlvbiggcG9zaXRpb24sIGNlbGVzdGlhbE5hbWUgKXtcbiAgICAgICAgICAgIHZhciBjZWxlc3RpYWxQb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb24oY2VsZXN0aWFsTmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gY2VsZXN0aWFsUG9zaXRpb24uc3ViKHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbihjZWxlc3RpYWxOYW1lKXtcbiAgICAgICAgICAgIHZhciBndWlkID0gdGhpcy5jZWxlc3RpYWxOYW1lc1tjZWxlc3RpYWxOYW1lXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5fZ2V0UG9zaXRpb24oZ3VpZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZ2V0UG9zaXRpb24oZ3VpZCl7XG4gICAgICAgICAgICB2YXIgbiA9IERhdGUubm93KCk7XG4gICAgICAgICAgICB2YXIgYyA9IHRoaXMuY2VsZXN0aWFsc1tndWlkXTtcbiAgICAgICAgICAgIHZhciB0ID0gYy50aW1lb3V0O1xuICAgICAgICAgICAgdmFyIHBvcyA9IHRoaXMucG9zaXRpb25zW2d1aWRdO1xuICAgICAgICAgICAgaWYobiAtIHBvcy50aW1lID4gdCl7XG4gICAgICAgICAgICAgICAgcG9zID0ge3ZlY3RvcjogdGhpcy5fY2FsY3VsYXRlKGd1aWQpLFxuICAgICAgICAgICAgICAgICAgICAgICB0aW1lOm5cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb25zW2d1aWRdID0gcG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb25zW2d1aWRdLnZlY3RvcjtcbiAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FsY3VsYXRlID0gZnVuY3Rpb24oZ3VpZCl7XG4gICAgICAgICAgICB2YXIgQyA9IHRoaXMuY2VsZXN0aWFsc1tndWlkXTtcbiAgICAgICAgICAgIGlmKEMub3JiaXQpe1xuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX3Bvc2l0aW9uKEMpOyAvLyBaZXJvLXJlbGF0aXZlO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NhbGNFID0gZnVuY3Rpb24oZSwgTSwgYWNjdXJhY3kpe1xuICAgICAgICAgICAgdmFyIEVuZXc9MTtcbiAgICAgICAgICAgIHZhciBFb2xkPTA7XG4gICAgICAgICAgICB2YXIgRXRlbXA9MDtcbiAgICAgICAgICAgIHZhciBFPTA7XG4gICAgICAgICAgICAvL2NoYW5nZSB0aGUgdmFsdWUgaW4gdGhlIG5leHQgbGluZSBmb3IgZGlmZmVyZW50IGFjY3VyYWN5XG4gICAgICAgICAgICAvL29mIHZhbHVlIG9mIEUgZm91bmQgZnJvbSBNXG4gICAgICAgICAgICB3aGlsZShNYXRoLmFicyhFbmV3LUVvbGQpID4gYWNjdXJhY3kpe1xuICAgICAgICAgICAgICAgIEV0ZW1wPUVuZXc7XG4gICAgICAgICAgICAgICAgRW5ldz1NK2UqTWF0aC5zaW4oRW9sZCk7XG4gICAgICAgICAgICAgICAgRW9sZD1FdGVtcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEU9RW5ldztcbiAgICAgICAgICAgIHJldHVybiBFO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cnVlQW5vbSA9IGZ1bmN0aW9uIChlYyxFLGRwKSB7XG5cbiAgICAgICAgICAgIHZhciBTPU1hdGguc2luKEUpO1xuXG4gICAgICAgICAgICB2YXIgQz1NYXRoLmNvcyhFKTtcblxuICAgICAgICAgICAgdmFyIGZhaz1NYXRoLnNxcnQoMS4wLWVjKmVjKTtcblxuICAgICAgICAgICAgdmFyIHBoaT1NYXRoLmF0YW4yKGZhaypTLEMtZWMpIC8vICAvSztcblxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocGhpKk1hdGgucG93KDEwLGRwKSkvTWF0aC5wb3coMTAsZHApO1xuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcGxhbmVDb29yZHMgPSBmdW5jdGlvbihjZWxlc3RpYWwsIHRpbWUpe1xuXG4gICAgICAgICAgICBpZihjZWxlc3RpYWwub3JiaXQgPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwib3JiaXQgaXMgbm90IGRlZmluZWQgZm9yXCIsIGNlbGVzdGlhbC5uYW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgdmFyIHBoID0gY2VsZXN0aWFsLm9yYml0LnQwIDsgLy8gKyB0aW1lIG9mIGxhc3Qgc2lnaHRTZWVpbmdcbiAgICAgICAgICAgIHZhciBlID0gY2VsZXN0aWFsLm9yYml0LmU7XG4gICAgICAgICAgICBpZihlID09IHVuZGVmaW5lZCApeyBlID0gMS4wOyB9XG4gICAgICAgICAgICB2YXIgYSA9IGNlbGVzdGlhbC5vcmJpdC5hO1xuICAgICAgICAgICAgdmFyIHB0aW1lID0gdGltZSArIHBoO1xuICAgICAgICAgICAgdmFyIFQgPSBjZWxlc3RpYWwub3JiaXQuVCA7XG4gICAgICAgICAgICAvL3ZhciBNID0gIC1NYXRoLlBJLzIgKyBwdGltZSAqIE1hdGguUEkgLyAoVC8yKSA7XG4gICAgICAgICAgICB2YXIgTSA9IHB0aW1lICogTWF0aC5QSSAvIChULzIpIDtcbiAgICAgICAgICAgIC8vICBjb25zb2xlLmxvZyhcIk1cIiwgTSk7XG4gICAgICAgICAgICB2YXIgRSA9IHRoaXMuX2NhbGNFKGUsIE0sIDAuMDAwMDAwMSkgO1xuICAgICAgICAgICAgdmFyIHBoaSA9IHRoaXMudHJ1ZUFub20oZSwgRSwgNykgO1xuICAgICAgICAgICAgdmFyIFIgICA9IGEqKDEtZSplKS8oMStlKk1hdGguY29zKHBoaSkpO1xuICAgICAgICAgICAgcGhpICs9IGNlbGVzdGlhbC5vcmJpdC5QO1xuICAgICAgICAgICAgdmFyIHBvcyA9IG5ldyBUSFIuVmVjdG9yMyhSICogTWF0aC5jb3MocGhpKSwgUiogTWF0aC5zaW4ocGhpKSwgMCk7XG4gICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBmdW5jdGlvbihjZWxlc3RpYWwsIHRpbWUpe1xuICAgICAgICAgICAgaWYoY2VsZXN0aWFsLm9yYml0ID09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIm9yYml0IGlzIG5vdCBkZWZpbmVkIGZvclwiLCBjZWxlc3RpYWwubmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG0gPSB0aGlzLl9nZXRSb3RhdGlvbk1hdHJpeChjZWxlc3RpYWwub3JiaXQubik7XG4gICAgICAgICAgICB2YXIgcSA9IG5ldyBUSFIuUXVhdGVybmlvbigpO1xuICAgICAgICAgICAgcS5zZXRGcm9tUm90YXRpb25NYXRyaXgobSk7XG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5fcGxhbmVDb29yZHMoY2VsZXN0aWFsLCB0aW1lKTtcbiAgICAgICAgICAgIHBvcy5hcHBseVF1YXRlcm5pb24ocSk7XG4gICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2dldFJvdGF0aW9uTWF0cml4ID0gZnVuY3Rpb24obm9ybWFsKXtcbiAgICAgICAgICAgIC8vIHJvdGF0aW9uIHJlbGF0aXZlIHRvIHogYXhpcztcbiAgICAgICAgICAgIHZhciBuID0gbmV3IFRIUi5WZWN0b3IzKCkuZnJvbUFycmF5KG5vcm1hbCk7XG4gICAgICAgICAgICBuLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgdmFyIFogPSBuZXcgVEhSLlZlY3RvcjMoMCwwLC0xKTtcbiAgICAgICAgICAgIHZhciBheGlzID0gWi5jbG9uZSgpLmNyb3NzKG4uY2xvbmUoKSApIDtcbiAgICAgICAgICAgIGF4aXMubm9ybWFsaXplKCk7XG4gICAgICAgICAgICB2YXIgYW5nbCA9IE1hdGguYWNvcyhaLmRvdChuKSk7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyBUSFIuTWF0cml4NCgpO1xuICAgICAgICAgICAgbS5tYWtlUm90YXRpb25BeGlzKGF4aXMsIGFuZ2wpO1xuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHZhciBjY2MgPSBudWxsO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKGNjYyA9PSBudWxsKXtcbiAgICAgICAgICAgIGNjYyA9IG5ldyBDZWxlc3RpYWxDYWxjdWxhdG9yKCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59KSgpXG4iLCJ2YXIgQ3VzdG9tVXBkYXRlckdldHRlciA9IChmdW5jdGlvbiAoKXtcbiAgICBcbiAgICB2YXIgY3VzdG9tVXBkYXRlckNhY2hlID0gbnVsbDtcblxuICAgIHZhciBDdXN0b21VcGRhdGVyID0gZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy51cGRhdGVyTGlzdCA9IHt9O1xuICAgICAgICB0aGlzLmFkZCA9IGZ1bmN0aW9uKCBuYW1lLCB1cGRhdGVyICl7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZXJMaXN0W25hbWVdID0gdXBkYXRlcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uKG5hbWUpe1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMudXBkYXRlckxpc3RbbmFtZV1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBfLmVhY2godGhpcy51cGRhdGVyTGlzdCwgZnVuY3Rpb24oZnVuYywgbmFtZSl7XG4gICAgICAgICAgICAgICAgZnVuYygpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgdXBkYXRlckdldHRlciA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKGN1c3RvbVVwZGF0ZXJDYWNoZSA9PSBudWxsKXtcbiAgICAgICAgICAgIGN1c3RvbVVwZGF0ZXJDYWNoZSA9IG5ldyBDdXN0b21VcGRhdGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1c3RvbVVwZGF0ZXJDYWNoZTtcbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZXJHZXR0ZXI7XG59KSgpXG4iLCJ3aW5kb3cuR2FtZUNvbnRleHRMb2FkZXIgPSBmdW5jdGlvbihzb2NrZXRTZXJ2aWNlKXtcblxuICAgIHZhciBzY2VuZVByb21pc2VzICA9IFtdO1xuICAgIHZhciBjZWxlc3RpYWxQcm9taXNlcyA9IFtdO1xuXG4gICAgdmFyIHNjZW5lc19pbl9wcm9jZXNzID0gW107XG5cbiAgICB2YXIgY29udGV4dEFjdG9ycyA9IFtdO1xuICAgIHZhciByZXR1cm5EZWZlciA9IFEuZGVmZXIoKTtcblxuICAgIHNvY2tldFNlcnZpY2UucmVxdWVzdChcIkNUWFwiLCB7dXNlcl9pZDp0cnVlfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oY29udGV4dCl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNPTlRFWFRcIiwgY29udGV4dCk7XG4gICAgICAgICAgICBfLmVhY2goY29udGV4dC5jb250ZXh0cywgZnVuY3Rpb24oc2NlbmVfZGVzYywgYWN0b3JfZ3VpZCl7XG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdFByb21pc2VzID0gW107XG4gICAgICAgICAgICAgICAgY29udGV4dEFjdG9ycy5wdXNoKGFjdG9yX2d1aWQpO1xuICAgICAgICAgICAgICAgIHZhciBzY2VuZV9ndWlkID0gc2NlbmVfZGVzYy5HVUlEO1xuICAgICAgICAgICAgICAgIHZhciBzY2VuZURlZiA9IFEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICBpZihzY2VuZXNfaW5fcHJvY2Vzcy5pbmRleE9mKCBzY2VuZV9ndWlkICApICE9PSAtMSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcblxuICAgICAgICAgICAgICAgICAgICBzY2VuZXNfaW5fcHJvY2Vzcy5wdXNoKHNjZW5lX2d1aWQpO1xuICAgICAgICAgICAgICAgICAgICBzY2VuZVByb21pc2VzLnB1c2goc2NlbmVEZWYucHJvbWlzZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdHMgPSBzY2VuZV9kZXNjLm9iamVjdHM7XG4gICAgICAgICAgICAgICAgdmFyIHNjZW5lX2FjdG9ycyA9IHNjZW5lX2Rlc2MuYWN0b3JzO1xuICAgICAgICAgICAgICAgIGlmKHNjZW5lX2Rlc2MubG9jYXRpb24uZy5vcmJpdCl7XG4gICAgICAgICAgICAgICAgICAgIGNlbGVzdGlhbFByb21pc2VzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICBzb2NrZXRTZXJ2aWNlLmdldChcImNlbGVjdGlhbC1yZWN1cnNpdmVcIiwge0dVSUQ6IHNjZW5lX2Rlc2MubG9jYXRpb24uZy5vcmJpdC5DfSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXy5lYWNoKG9iamVjdHMsIGZ1bmN0aW9uKG9ndWlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwID0gc29ja2V0U2VydmljZS5nZXQoXCJBXCIsIHtpZDogb2d1aWR9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzb2NrZXRTZXJ2aWNlLmdldChcIlRcIiwge3R5cGU6IG9iai5zdWJfdHlwZX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc3ViX3R5cGUgPSB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3RQcm9taXNlcy5wdXNoKHApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFEuYWxsKG9iamVjdFByb21pc2VzKS50aGVuKGZ1bmN0aW9uKG9iamVjdHMpe1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIklJXCIsIG9iamVjdHMpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhyZWVTY2VuZSA9ICBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjZW5lID0gbmV3IFNjZW5lKHRocmVlU2NlbmUsIHNlbGYpO1xuICAgICAgICAgICAgICAgICAgICBzY2VuZS5HVUlEID0gc2NlbmVfZ3VpZDtcbiAgICAgICAgICAgICAgICAgICAgc2NlbmUub25Mb2FkQ2FsbGJhY2sgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NlbmVEZWYucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NlbmU6c2NlbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyZWVTY2VuZTogdGhyZWVTY2VuZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RvcnM6IHNjZW5lX2Rlc2MuYWN0b3JzXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgXy5lYWNoKHNjZW5lX2FjdG9ycywgZnVuY3Rpb24oYWN0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjZW5lLmpvaW5fYWN0b3IoYWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5lYWNoKG9iamVjdHMsIGZ1bmN0aW9uKG9iail7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2VuZS5qb2luX29iamVjdChvYmosIG9iai5HVUlEKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYoIHNjZW5lUHJvbWlzZXMubGVuZ3RoID09IDApe1xuICAgICAgICAgICAgICAgIHJldHVybkRlZmVyLnJlamVjdChcIk5vIHNjZW5lcyB0byBsb2FkXCIpO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgUS5hbGwoIHNjZW5lUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oc2NlbmVzKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRGVmZXIucmVzb2x2ZSh7c2NlbmVzOnNjZW5lcywgY3VycmVudFVzZXJBY3RvcnM6IGNvbnRleHRBY3RvcnN9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9KTtcblxuXG5cblxuICAgIHJldHVybiByZXR1cm5EZWZlci5wcm9taXNlO1xuXG59XG4iLCJ2YXIgS2V5TWFwcGVyID0gZnVuY3Rpb24oIHZpZXdQb3J0cyl7XG4gICAgdGhpcy52aWV3UG9ydHMgPSB2aWV3UG9ydHNcbiAgICBfLmVhY2godGhpcy52aWV3UG9ydHMsIGZ1bmN0aW9uKHZwKXtcbiAgICAgICAgaWYodnAuZG9EcmF3VUkoKSl7XG4gICAgICAgICAgICB2cC52aWV3LmFjdG9yc1xuICAgICAgICB9XG4gICAgfSlcblxuICAgIFxuXG59XG4iLCJ2YXIgSW5wdXRTZXJ2aWNlR2V0dGVyID0gKGZ1bmN0aW9uKCl7XG4gICAgdmFyIElucHV0U2VydmljZSA9IGZ1bmN0aW9uKCApe1xuICAgICAgICB2YXIgbW91c2VTdGF0ZSA9IHt4OjAsIHk6MH07XG4gICAgICAgIHRoaXMubW91c2VTdGF0ZSA9IG1vdXNlU3RhdGU7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgbW91c2VTdGF0ZS54ID0gZS54O1xuICAgICAgICAgICAgbW91c2VTdGF0ZS55ID0gZS55O1xuICAgICAgICB9LCBmYWxzZSApO1xuICAgICAgICBSZW5kZXJlckdldHRlcigpLmRvbUVsZW1lbnQoKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICB0aGF0LmlucHV0KCAnbG1vdXNlJywgZmFsc2UpXG4gICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgICAgIFJlbmRlcmVyR2V0dGVyKCkuZG9tRWxlbWVudCgpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgdGhhdC5pbnB1dCggJ2xtb3VzZScsIHRydWUpXG4gICAgICAgIH0pO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICB2YXIgY29kZSA9IGUua2V5Q29kZTtcbiAgICAgICAgICAgIHRoYXQuaW5wdXQoIGNvZGUsIHRydWUpXG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIHZhciBjb2RlID0gZS5rZXlDb2RlO1xuICAgICAgICAgICAgdGhhdC5pbnB1dChjb2RlLCBmYWxzZSlcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICB0aGlzLmtleUNvZGVzID0ge307XG4gICAgICAgIHRoaXMua2V5TWFwID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZXRLZXlNYXAgPSBmdW5jdGlvbihrZXlNYXApe1xuICAgICAgICAgICAgdGhpcy5rZXlNYXAgPSBrZXlNYXA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52aWV3cG9ydFNlcnZpY2UgPSBWaWV3cG9ydFNlcnZpY2VHZXR0ZXIoKVxuXG4gICAgICAgIHRoaXMuZ2V0TW91c2VQcm9qZWN0aW9uQXJyYXkgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlld3BvcnRTZXJ2aWNlLnByb2plY3QodGhpcy5tb3VzZVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZpZXdwb3J0cyA9IG51bGw7XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlU2NlbmUgPSBmdW5jdGlvbihzY2VuZSl7XG4gICAgICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlucHV0ID0gZnVuY3Rpb24oa2V5Y29kZSwgdXBfb3JfZG93bil7XG4gICAgICAgICAgICB2YXIgdHMgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIGlmKHVwX29yX2Rvd24pIHsvLyBkb3duID09IHRydWVcbiAgICAgICAgICAgICAgICB0aGlzLmtleUNvZGVzW2tleWNvZGVdID0ge2luX2FjdGlvbjp0cnVlLCB0czp0c307XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmtleUNvZGVzW2tleWNvZGVdKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmtleUNvZGVzW2tleWNvZGVdLnRzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmtleUNvZGVzW2tleWNvZGVdLmluX2FjdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmtleUNvZGVzW2tleWNvZGVdLnRzID0gdHM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5Q29kZXNba2V5Y29kZV0uZGVsdGEgPSB0cyAtIHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBzeW5jcm9uaXplciA9IFN5bmNocm9uaXplckdldHRlcigpO1xuICAgICAgICB0aGlzLmdldExhdGVzdEFjdGlvbnMgPSBmdW5jdGlvbiggc2NlbmVHdWlkLCBub3cgKXtcbiAgICAgICAgICAgIGlmKCB0aGlzLnNjZW5lLnNjZW5lR3VpZCAhPSBzY2VuZUd1aWQpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIndyb25nIHNjZW5lIGZvciBpbnB1dFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW10gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodGhpcy5rZXlNYXAgPT0gbnVsbCl7IFxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIm5vIGtleW1hcFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47IFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIF8uZWFjaCh0aGlzLmtleUNvZGVzLCBmdW5jdGlvbihrX2FjdGlvbiwga2V5Y29kZSl7XG4gICAgICAgICAgICAgICAgaWYoa19hY3Rpb24uaW5fYWN0aW9uKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gbm93IC0ga19hY3Rpb24udHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cyA9IG5vdztcbiAgICAgICAgICAgICAgICAgICAga19hY3Rpb24udHMgPSBub3c7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGtfYWN0aW9uLmRlbHRhO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHMgPSBrX2FjdGlvbi50cztcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMua2V5Q29kZXNba2V5Y29kZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBfLmNsb25lKHNlbGYuYWN0aW9uc1trZXljb2RlXSk7XG4gICAgICAgICAgICAgICAgaWYoa2V5Y29kZSBpbiB0aGF0LmtleU1hcCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3RfZGVzYyAgPSB0aGF0LmtleU1hcFtrZXljb2RlXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld19hY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNoIDogYWN0X2Rlc2MubWVzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldiA6IGFjdF9kZXNjLmRldmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGFjdF9kZXNjLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cyA6dHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZGVudDogdHMgKyBzeW5jaHJvbml6ZXIuZ2V0Q3VycmVudFRpbWVEaWZmKCkgKyBzeW5jaHJvbml6ZXIuZ2V0QXZlcmFnZUxhdGVuY2l0eSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGE6IGRlbHRhLzEwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB3bW91c2U6IHRoYXQuZ2V0TW91c2VQcm9qZWN0aW9uQXJyYXkoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnMucHVzaChuZXdfYWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgSW5wdXRTZXJ2aWNlQ2FjaGUgPSBudWxsO1xuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbigpe1xuICAgICAgICBpZihJbnB1dFNlcnZpY2VDYWNoZSA9PSBudWxsKXtcbiAgICAgICAgICAgIElucHV0U2VydmljZUNhY2hlID0gbmV3IElucHV0U2VydmljZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBJbnB1dFNlcnZpY2VDYWNoZTtcbiAgICB9XG4gICAgcmV0dXJuIGdldHRlcjtcbn0pKCk7XG4iLCIiLCJ3aW5kb3cuUmVuZGVyZXJHZXR0ZXIgPSAoZnVuY3Rpb24oKXtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgUmVuZGVyZXIgPSBmdW5jdGlvbigpe1xuICAgICAgICB2YXIgd2lkdGggICA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XG4gICAgICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keSxcbiAgICAgICAgICAgIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBoZWlnaHQgPSBNYXRoLm1heCggYm9keS5zY3JvbGxIZWlnaHQsIGJvZHkub2Zmc2V0SGVpZ2h0LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sLmNsaWVudEhlaWdodCwgaHRtbC5zY3JvbGxIZWlnaHQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwub2Zmc2V0SGVpZ2h0ICk7XG5cbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgY29uc29sZS5pbmZvKCdJbml0IHJlbmRlcmVyJywgd2lkdGgsIGhlaWdodCwgZG9jdW1lbnQuYm9keSk7XG4gICAgICAgIHRoaXMuZ2xSZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHthbnRpYWxpYXM6dHJ1ZSwgYWxwaGE6dHJ1ZX0pO1xuICAgICAgICB0aGlzLmdsUmVuZGVyZXIuc2V0U2l6ZSggd2lkdGgsIGhlaWdodCApO1xuICAgICAgICB0aGlzLmdsUmVuZGVyZXIuc2V0Q2xlYXJDb2xvcihuZXcgVEhSRUUuQ29sb3IoMHgwMDAwMDApKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmdsUmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cbiAgICAgICAgdGhpcy5nbFJlbmRlcmVyLmdhbW1hSW5wdXQgPSB0cnVlO1xuICAgICAgICB0aGlzLmdsUmVuZGVyZXIuZ2FtbWFPdXRwdXQgPSB0cnVlO1xuICAgICAgICB0aGlzLmdsUmVuZGVyZXIuYXV0b0NsZWFyID0gdHJ1ZSA7XG5cbiAgICAgICAgdGhpcy5nbFJlbmRlcmVyLnBoeXNpY2FsbHlCYXNlZFNoYWRpbmcgPSB0cnVlO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cblxuICAgICAgICB0aGlzLmRvbUVsZW1lbnQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2xSZW5kZXJlci5kb21FbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIHZpZXdQb3J0ICl7XG4gICAgICAgICAgICB0aGlzLmdsUmVuZGVyZXIuc2V0Vmlld3BvcnQodmlld1BvcnQuY29uZmlnLmwsIHZpZXdQb3J0LmNvbmZpZy50LCB2aWV3UG9ydC5jb25maWcudywgdmlld1BvcnQuY29uZmlnLmgpXG4gICAgICAgICAgICB0aGlzLnJlbmRlclNreUJveCgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJDZWxlc3RpYWxTY2VuZSgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJTY2VuZSggdmlld1BvcnQgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVuZGVyU2t5Qm94ID0gZnVuY3Rpb24oIHZpZXdwb3J0ICl7XG4gICAgICAgICAgICB2YXIgbWF0cml4T2ZQbGF5ZXIgPSB2aWV3cG9ydC5jYW1lcmEucGFyZW50Lm1hdHJpeC5jbG9uZSgpO1xuICAgICAgICAgICAgdmFyIG1hdHJpeE9mQ2FtZXJhID0gdmlld3BvcnQuY2FtZXJhLm1hdHJpeC5jbG9uZSgpO1xuICAgICAgICAgICAgbWF0cml4T2ZQbGF5ZXIubXVsdGlwbHkobWF0cml4T2ZDYW1lcmEpO1xuICAgICAgICAgICAgdmFyIHJvdGF0aW9uTWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5leHRyYWN0Um90YXRpb24obWF0cml4T2ZQbGF5ZXIpO1xuICAgICAgICAgICAgdmFyIHEgPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21Sb3RhdGlvbk1hdHJpeChyb3RhdGlvbk1hdHJpeCk7XG4gICAgICAgICAgICB2aWV3cG9ydC5za3lCb3hDYW1lcmEucm90YXRpb24uc2V0RnJvbVF1YXRlcm5pb24ocSk7XG5cblxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oXCJTa3lib3ggaXMgbm90IHJlbmRlcmVkIHlldFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlckNlbGVzdGlhbFNjZW5lID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybihcIkNlbGVzdGlhbCBvYmplY3RzIGlzIG5vdCByZW5kZXJlZCB5ZXRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW5kZXJTY2VuZSA9IGZ1bmN0aW9uKHZpZXdwb3J0KXtcbiAgICAgICAgICAgIHZhciBzY2VuZSA9IHZpZXdwb3J0LnZpZXcuc2NlbmUudGhyZWVfc2NlbmU7XG4gICAgICAgICAgICB2YXIgY2FtZXJhID0gdmlld3BvcnQuY2FtZXJhO1xuICAgICAgICAgICAgdGhpcy5nbFJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcbiAgICAgICAgfVxuICAgICAgICAgXG4gICAgfVxuXG4gICAgdmFyIHNjID0gbnVsbDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoc2MgPT0gbnVsbCApe1xuICAgICAgICAgICAgc2MgPSBuZXcgUmVuZGVyZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2M7XG4gICAgfVxuXG59KSgpO1xuIiwidmFyIFNldHRpbmdzID0gKGZ1bmN0aW9uKCl7XG5cbiAgICB2YXIgU2VydmljZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBVU0VSX1NFVFRJTkdTX0tFWSA9IFwidXNlci1zZXR0aW5nc1wiO1xuICAgICAgICB2YXIgc2V0dGluZ3MgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFVTRVJfU0VUVElOR1NfS0VZKSk7XG4gICAgICAgIGlmKHNldHRpbmdzKXtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnID0gc2V0dGluZ3M7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5jb25maWcgPSB7fTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgdGhpcy5nZXRWaWV3cG9ydEJpbmRpbmdzID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmICghKHRoaXMuY29uZmlnWyd2aWV3UG9ydEJpbmRpbmdzJ10gKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcudmlld1BvcnRCaW5kaW5ncyA9IHRoaXMuZGVmYXVsdFZpZXdQb3J0QmluZGluZ3M7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oVVNFUl9TRVRUSU5HU19LRVksIEpTT04uc3RyaW5naWZ5KCB0aGlzLmNvbmZpZyApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy52aWV3UG9ydEJpbmRpbmdzXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWZhdWx0Vmlld1BvcnRCaW5kaW5ncyA9IHtcbiAgICAgICAgICAgIFwic2hpcC5yb29raWVfc2hpcC5QaWxvdGluZy5mcm9udFwiIDogXCJkZWZhdWx0XCJcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgc2MgPSBudWxsO1xuICAgIHJldHVybiBmdW5jdGlvbigpe1xuICAgICAgICBpZihzYyA9PSBudWxsKXtcbiAgICAgICAgICAgIHNjID0gbmV3IFNlcnZpY2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2M7XG4gICAgfVxuXG5cbn0pKClcbiIsIlxudmFyIFNvY2tldFNlcnZpY2VHZXR0ZXIgPSAoZnVuY3Rpb24oKXtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgU29ja2V0U2VydmljZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBhdXRoSGFzaEYgPSBmdW5jdGlvbihjYil7XG4gICAgICAgICAgICB2YXIgZCA9IFEuZGVmZXIoKTtcbiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCAnL215LWF1dGgtaGFzaC8nLCB0cnVlKTtcbiAgICAgICAgICAgIHhoci5zZW5kKCk7XG5cbiAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCkge1xuICAgICAgICAgICAgICAgICAgICBpZih4aHIuc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGpzID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiKGpzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzb2NrZXQgPSBpby5jb25uZWN0KCk7XG4gICAgICAgIHZhciBpc19yZWFkeSA9IGZhbHNlO1xuICAgICAgICB2YXIgUXVldWUgPSBbXTtcblxuICAgICAgICB2YXIgaXNfYXV0aGVudGljYXRlZCA9IFEuZGVmZXIoKTtcbiAgICAgICAgc29ja2V0Lm9uKCdjb25uZWN0ZWQnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInJlY29ubmVjdGlvblwiKTtcbiAgICAgICAgICAgIGF1dGhIYXNoRihmdW5jdGlvbihqc29uKXtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIj4+PlwiLGpzb24pO1xuICAgICAgICAgICAgICAgIHNvY2tldC5lbWl0KFwiYXV0aF9oYXNoXCIsIHthdXRoOiBqc29uLmhhc2h9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICBzb2NrZXQub24oXCJhdXRoX2NvbXBsZXRlZFwiLCBmdW5jdGlvbihtc2cpe1xuICAgICAgICAgICAgaWYobXNnLmVycil7XG4gICAgICAgICAgICAgICAgaXNfYXV0aGVudGljYXRlZC5yZWplY3QobXNnLmVycik7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiPj5cIik7XG4gICAgICAgICAgICAgICAgaXNfYXV0aGVudGljYXRlZC5yZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgIC8vJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24oKXtpc19hdXRoZW50aWNhdGVkLnJlc29sdmUodHJ1ZSl9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhpc19hdXRoZW50aWNhdGVkKTtcbiAgICAgICAgaXNfYXV0aGVudGljYXRlZC5wcm9taXNlLnRoZW4oZnVuY3Rpb24ocyxlKXtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGlzX2F1dGhlbnRpY2F0ZWQsIHMsZSk7XG4gICAgICAgICAgICBpc19yZWFkeSA9IHRydWU7XG4gICAgICAgICAgICBmb3IodmFyIGkgPTA7aSA8UXVldWUubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIHNvY2tldC5lbWl0KFF1ZXVlW2ldLlQsIFF1ZXVlW2ldLnApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgUyA9IHt9O1xuICAgICAgICB2YXIgY2JzID0ge307XG4gICAgICAgIHZhciBpbmNvbWluZ0xpc3RlbmVycyA9IHt9O1xuICAgICAgICB2YXIgY3VyY2JpeCA9IDA7XG4gICAgICAgIGZ1bmN0aW9uIGdldENCSXgoKXtcbiAgICAgICAgICAgIGN1cmNiaXgrPTE7XG4gICAgICAgICAgICByZXR1cm4gY3VyY2JpeCAlIDEwMDAwO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBSZXEgPSBmdW5jdGlvbihtdCwgdCwgcCl7XG4gICAgICAgICAgICB2YXIgZCA9IFEuZGVmZXIoKSxcbiAgICAgICAgICAgICAgICBjYml4ID0gIGdldENCSXgoKTtcbiAgICAgICAgICAgIGNic1tjYml4XSA9IHtcbiAgICAgICAgICAgICAgICBjYjogZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBvID0ge3A6cH07XG4gICAgICAgICAgICBvLmNiaXggPSBjYml4O1xuICAgICAgICAgICAgby5UID0gdDtcbiAgICAgICAgICAgIGlmKCFpc19yZWFkeSl7XG4gICAgICAgICAgICAgICAgUXVldWUucHVzaCh7VDptdCxwOm99KTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHNvY2tldC5lbWl0KG10LCBvKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgbWVzc2FnZXNfdG9faGVhciA9IFtcIlFcIiwgXCJSXCIsICdTJ107XG4gICAgICAgIF8uZWFjaChtZXNzYWdlc190b19oZWFyLCBmdW5jdGlvbihtZXNzYWdlX3R5cGUpe1xuICAgICAgICAgICAgc29ja2V0Lm9uKG1lc3NhZ2VfdHlwZSwgZnVuY3Rpb24obXNnKXtcbiAgICAgICAgICAgICAgICB2YXIgY2JpeCA9IG1zZy5jYml4O1xuICAgICAgICAgICAgICAgIGlmKGNicy5oYXNPd25Qcm9wZXJ0eShjYml4KSkge1xuICAgICAgICAgICAgICAgICAgICBjYnNbY2JpeF0uY2IucmVzb2x2ZShtc2cuZCk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjYnNbY2JpeF07XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk5vIHN1Y2ggY2JpeCBpbiBjYWxsYmFja3NcIiwgY2JpeCwgbWVzc2FnZV90eXBlICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgc3BlY2lhbEV2ZW50cyA9IFtcIkZcIiwgXCJBTE1cIl07XG5cbiAgICAgICAgXy5lYWNoKHNwZWNpYWxFdmVudHMsIGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICAgIHNvY2tldC5vbihldmVudCwgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgaWYoZXZlbnQgaW4gaW5jb21pbmdMaXN0ZW5lcnMpe1xuICAgICAgICAgICAgICAgICAgICBfLmVhY2goaW5jb21pbmdMaXN0ZW5lcnNbIGV2ZW50IF0sIGZ1bmN0aW9uKGxpc3RlbmVyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyKGV2ZW50LCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KTtcbiAgICAgICAgUy5nZXQgPSBmdW5jdGlvbih0LHApe1xuICAgICAgICAgICAgcmV0dXJuIFJlcShcIlFcIiwgdCxwKVxuICAgICAgICB9O1xuICAgICAgICBTLnN5bmMgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIFJlcShcIlNcIiwnJyx7fSlcbiAgICAgICAgfTtcbiAgICAgICAgUy5yZXF1ZXN0ID0gZnVuY3Rpb24odCxwKXtcbiAgICAgICAgICAgIHJldHVybiBSZXEoXCJSXCIsIHQscClcbiAgICAgICAgfTtcbiAgICAgICAgUy5hY3Rpb24gPWZ1bmN0aW9uKG1lc3Mpe1xuICAgICAgICAgICAgc29ja2V0LmVtaXQoXCJBXCIsbWVzcylcbiAgICAgICAgfTtcbiAgICAgICAgUy5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmdW5jKXtcbiAgICAgICAgICAgIGlmKCEoZXZlbnQgaW4gaW5jb21pbmdMaXN0ZW5lcnMpKXtcbiAgICAgICAgICAgICAgICBpbmNvbWluZ0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluY29taW5nTGlzdGVuZXJzW2V2ZW50XS5wdXNoKGZ1bmMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTO1xuICAgIH07XG5cbiAgICB2YXIgc29ja2V0U2VydmljZUNhY2hlID0gbnVsbDtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoIHNvY2tldFNlcnZpY2VDYWNoZSA9PSBudWxsICkge1xuICAgICAgICAgICBzb2NrZXRTZXJ2aWNlQ2FjaGUgPSBTb2NrZXRTZXJ2aWNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvY2tldFNlcnZpY2VDYWNoZTtcbiAgICB9XG4gICAgcmV0dXJuIGdldHRlcjtcbn0pKCk7XG4iLCJ2YXIgU3luY2hyb25pemVyR2V0dGVyID0gKGZ1bmN0aW9uKCl7XG5cbiAgICB2YXIgc3luY2hyb25pemVyQ2FjaGUgPSBudWxsO1xuXG4gICAgdmFyIFN5bmNocm9uaXplciA9IGZ1bmN0aW9uKHNvY2tldFNlcnZpY2Upe1xuICAgICAgICB2YXIgTUFYX0RJRkZfTEVOR1RIID0gMTA7XG4gICAgICAgIHZhciBEUk9QX0ZJUlNUX0RJRkZTID0gNDtcbiAgICAgICAgdmFyIFNZTkNfVElNRU9VVCA9IDEwMDA7XG4gICAgICAgICAgICBcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMubGFzdFRpbWVzdGFtcCA9IDA7XG4gICAgICAgIHRoaXMubGF0ZW5jaXRpZXMgPSBbXVxuICAgICAgICB0aGlzLnRpbWVEaWZmcyA9IFtdO1xuICAgICAgICB0aGlzLmRpZmZDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgICBcblxuICAgICAgICB0aGlzLnNvY2tldFN5bmNDbG9zdXJlID0gZnVuY3Rpb24oc3luY0RhdGEpe1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRUaW1lU3RhbXAgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgdmFyIHBpbmcgPSBjdXJyZW50VGltZVN0YW1wIC0gdGhhdC5sYXN0VGltZXN0YW1wO1xuICAgICAgICAgICAgdGhhdC5sYXRlbmNpdGllcy5wdXNoKHBpbmcgLyAyKTtcbiAgICAgICAgICAgIHRoYXQuYXZlcmFnZUxhdGVuY2l0eSA9IE1hdGguZmxvb3IodGhhdC5hdmVyYWdlKHRoYXQubGF0ZW5jaXRpZXMpICk7XG4gICAgICAgICAgICB2YXIgdGltZURpZmYgPSBzeW5jRGF0YS50cyAtIHRoYXQubGFzdFRpbWVzdGFtcDtcbiAgICAgICAgICAgIHRoYXQuZGlmZkNvdW50ICs9IDE7XG4gICAgICAgICAgICBpZihEUk9QX0ZJUlNUX0RJRkZTID4gdGhhdC5kaWZmQ291bnQpe1xuICAgICAgICAgICAgICAgIHRoYXQudGltZURpZmZzLnB1c2godGltZURpZmYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodGhhdC50aW1lRGlmZnMubGVuZ3RoID4gTUFYX0RJRkZfTEVOR1RIKXt0aGF0LnRpbWVEaWZmcy5zcGxpY2UoMCwxKSB9XG4gICAgICAgICAgICB0aGF0LnRpbWVEaWZmID0gdGhhdC5hdmVyYWdlKHRoYXQudGltZURpZmZzKTtcbiAgICAgICAgICAgIGlmKCEgdGhhdC5pc1N0b3BwZWQgKXtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc3luY0xvb3AoKTtcbiAgICAgICAgICAgICAgICB9LCBTWU5DX1RJTUVPVVQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYXZlcmFnZSA9IGZ1bmN0aW9uKGFycmF5KXtcbiAgICAgICAgICAgIHJldHVybiBfLnJlZHVjZShhcnJheSwgZnVuY3Rpb24oYSxiKXtyZXR1cm4gYStifSwgMCkgLyBhcnJheS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuc3luY0xvb3AgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy8gY29uc29sZS5pbmZvKFwic3luY1wiKTtcbiAgICAgICAgICAgIHRoaXMubGFzdFRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBzb2NrZXRTZXJ2aWNlLnN5bmMoICkudGhlbiggdGhpcy5zb2NrZXRTeW5jQ2xvc3VyZSApO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLmdldEN1cnJlbnRUaW1lRGlmZiA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lRGlmZjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdldEF2ZXJhZ2VMYXRlbmNpdHkgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXZlcmFnZUxhdGVuY2l0eTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdGFydCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpe1xuICAgICAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zeW5jTG9vcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RvcCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKHN5bmNocm9uaXplckNhY2hlID09IG51bGwpe1xuICAgICAgICAgICAgc3luY2hyb25pemVyQ2FjaGUgPSBuZXcgU3luY2hyb25pemVyKCBTb2NrZXRTZXJ2aWNlR2V0dGVyKCkgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzeW5jaHJvbml6ZXJDYWNoZTtcbiAgICB9XG4gICAgcmV0dXJuIGdldHRlcjtcblxufSkoKVxuIiwid2luZG93LlZpZXcgPSBmdW5jdGlvbihzY2VuZSwgdmlld05hbWUsIGNvbnRyb2xsYWJsZU9iamVjdCwgY29udHJvbGxhYmVsTWVzaCl7XG4gICAgdGhpcy5hY3RvcnMgPSB7fTtcbiAgICB0aGlzLlVJUyA9IFtdO1xuICAgIHRoaXMuc2NlbmU9IHNjZW5lO1xuICAgIHRoaXMudmlld05hbWUgPSB2aWV3TmFtZTtcbiAgICB0aGlzLm9iamVjdCA9IGNvbnRyb2xsYWJsZU9iamVjdDtcbiAgICB0aGlzLm1lc2ggPSBjb250cm9sbGFiZWxNZXNoO1xuXG4gICAgdGhpcy5za3lib3hTY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuICAgIHRoaXMuY2VsZXN0aWFsU2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcblxuXG4gICAgdGhpcy5iaW5kID0gZnVuY3Rpb24odnApe1xuICAgICAgICB0aGlzLnZpZXdwb3J0ID0gdnA7XG4gICAgfVxuICAgIHRoaXMudW5iaW5kVmlld3BvcnQgPSBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLm1lc2gucmVtb3ZlKHRoaXMudmlld3BvcnQuY2FtZXJhKVxuICAgICAgICB0aGlzLnZpZXdwb3J0ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuXG4gICAgdGhpcy5hZGRBY3RvciA9IGZ1bmN0aW9uKCBhY3RvciApe1xuICAgICAgICB0aGlzLmFjdG9yc1thY3Rvci5HVUlEXSA9IGFjdG9yO1xuXG4gICAgfTtcbiAgICB0aGlzLmFkZFVJID0gZnVuY3Rpb24oIHVpICl7XG4gICAgICAgIHRoaXMuVUlTLnB1c2goIHVpICk7XG4gICAgfVxuXG5cbn1cbiIsInZhciBWaWV3Q29sbGVjdGlvbiA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy52aWV3cz17fSxcbiAgICB0aGlzLnZpZXdPcmRlcj0gW10sXG4gICAgdGhpcy5pZGVudGl0eU1hcCA9IHt9LFxuICAgIHRoaXMuYnlHbG9iYWxOYW1lID17fSxcbiAgICB0aGlzLmFkZD0gZnVuY3Rpb24oaWRlbnRpdHksIGdsb2JhbE5hbWUgLHZpZXcsIGFjdG9yLCBVSSl7XG4gICAgICAgIGlmKCEoaWRlbnRpdHkgIGluIHRoaXMudmlld3MpKXtcbiAgICAgICAgICAgIHRoaXMudmlld3NbaWRlbnRpdHldID0gdmlldztcbiAgICAgICAgICAgIHRoaXMudmlld09yZGVyLnB1c2goaWRlbnRpdHkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnlHbG9iYWxOYW1lW2dsb2JhbE5hbWVdID0gdmlldztcbiAgICAgICAgdGhpcy52aWV3c1tpZGVudGl0eV0uYWRkQWN0b3IoIGFjdG9yICk7XG4gICAgICAgIHRoaXMudmlld3NbaWRlbnRpdHldLmFkZFVJKCBVSSApO1xuICAgIH0sXG4gICAgdGhpcy5nZXQ9IGZ1bmN0aW9uKGlkKXtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld3NbaWRdO1xuXG4gICAgfSxcbiAgICB0aGlzLmdldEJ5R2xvYmFsTmFtZSA9IGZ1bmN0aW9uKG5hbWUpe1xuICAgICAgICByZXR1cm4gdGhpcy5ieUdsb2JhbE5hbWVbbmFtZV07XG4gICAgfSxcbiAgICB0aGlzLmdldEl4ID1mdW5jdGlvbihpeCl7XG4gICAgICAgIHZhciBuID0gdGhpcy52aWV3T3JkZXJbaXhdO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQobik7XG4gICAgfVxuXG59XG4iLCJ3aW5kb3cuVmlld3BvcnQgPSBmdW5jdGlvbiggY29uZmlnICl7XG5cbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZTtcbiAgICB0aGlzLmtleU1hcCA9IHt9O1xuICAgIHRoaXMuYWN0aW9ucyA9IHt9O1xuXG5cbiAgICB0aGlzLmRvRHJhd1VJID0gZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmRyYXdVSTtcbiAgICB9O1xuXG4gICAgdGhpcy5tYWtlQ2FtZXJhID0gZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGNhbWVyYUJhc2VWZWN0b3IgPSBuZXcgVEhSRUUuVmVjdG9yMygwLDAsLTEpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIm1ha2luZyBjYW1lcmFcIiAsIHRoaXMuY29uZmlnKTtcbiAgICAgICAgdmFyIGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg0NSwgdGhpcy5jb25maWcudyAvIHRoaXMuY29uZmlnLmgsIDEsIDEwMDApO1xuICAgICAgICB2YXIgYXhpcyA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgICAgIHZhciB2cFJvdGF0aW9uID0gdGhpcy52aWV3Lm9iamVjdC5jYW1lcmFzW3RoaXMudmlldy52aWV3TmFtZV0uZGlyZWN0aW9uO1xuICAgICAgICB2YXIgdnBQb3NpdGlvbiA9IHRoaXMudmlldy5vYmplY3QuY2FtZXJhc1t0aGlzLnZpZXcudmlld05hbWVdLnBvc2l0aW9uO1xuXG4gICAgICAgIGF4aXMuY3Jvc3NWZWN0b3JzKGNhbWVyYUJhc2VWZWN0b3IsIG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KHZwUm90YXRpb24pICk7XG4gICAgICAgIHZhciByb3RBbmdsZSA9IE1hdGguYWNvcyhjYW1lcmFCYXNlVmVjdG9yLmRvdChuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheSggdnBSb3RhdGlvbikgKSApO1xuICAgICAgICBjYW1lcmEucG9zaXRpb24uZnJvbUFycmF5KHZwUG9zaXRpb24pO1xuXG5cbiAgICAgICAgY2FtZXJhLnJvdGF0ZU9uQXhpcyhheGlzLCByb3RBbmdsZSk7XG4gICAgICAgIHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuICAgICAgICB0aGlzLnNreUJveENhbWVyYSAgICA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg0NSwgdGhpcy5jb25maWcudyAvIHRoaXMuY29uZmlnLmgsIDEsIDEwMDApIFxuICAgICAgICB0aGlzLmNlbGVzdGlhbENhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg0NSwgdGhpcy5jb25maWcudyAvIHRoaXMuY29uZmlnLmgsIDEsIDEwMDApIFxuICAgICAgICB0aGlzLnZpZXcubWVzaC5hZGQoY2FtZXJhKTtcbiAgICB9XG5cbiAgICB0aGlzLmJpbmQgPSBmdW5jdGlvbiggdmlldyApe1xuICAgICAgICBjb25zb2xlLmluZm8oXCJCSU5EXCIsIHRoaXMudmlldyk7XG4gICAgICAgIGlmKHRoaXMudmlldyl7XG4gICAgICAgICAgICB0aGlzLnZpZXcudW5iaW5kVmlld3BvcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgXy5lYWNoKHZpZXcuYWN0b3JzLCBmdW5jdGlvbihhKXtcbiAgICAgICAgICAgIHZhciBhY3Rpb25zID0gdmlldy5zY2VuZS5nZXRBY3Rpb25zKClbYS5jb250cm9sLm9iamVjdF9ndWlkXTtcbiAgICAgICAgICAgIF8uZWFjaChhY3Rpb25zLCBmdW5jdGlvbihhY3Rpb24pe1xuICAgICAgICAgICAgICAgIGlmKGFjdGlvbi5kZWZhdWx0X2tleSl7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQua2V5TWFwW2FjdGlvbi5kZWZhdWx0X2tleV0gPSBhY3Rpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoYXQuYWN0aW9uc1thY3Rpb24ubmFtZV0gPSAgYWN0aW9uO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFrZUNhbWVyYSgpO1xuICAgICAgICB0aGlzLnZpZXcuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLnVucHJvamVjdENvb3JkcyA9IGZ1bmN0aW9uKHgsIHkpe1xuICAgICAgICB2YXIgdnBHZW9tZXRyeSA9IHRoaXMuY29uZmlnO1xuICAgICAgICB2YXIgdnBYID0geCAtIHZwR2VvbWV0cnkubDtcbiAgICAgICAgdmFyIHZwWSA9IHkgLSB2cEdlb21ldHJ5LnQ7XG4gICAgICAgIHZhciBYID0gKHZwWCAvIHZwR2VvbWV0cnkudyAqMikgLTE7XG4gICAgICAgIHZhciBZID0gKHZwWSAvIHZwR2VvbWV0cnkuaCAqMikgKzE7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgVEhSRUUuVmVjdG9yMyhYLCBZLCAwLjk5IClcbiAgICAgICAgdGhpcy5wcm9qZWN0b3IudW5wcm9qZWN0VmVjdG9yKHJlc3VsdCwgdGhpcy5jYW1lcmEpO1xuICAgICAgICByZXR1cm4gcmVzdWx0LmNsb25lKCk7XG4gICAgfVxufVxuIiwidmFyIFZpZXdwb3J0U2VydmljZUdldHRlciA9IChmdW5jdGlvbigpe1xuXG4gICAgdmFyIFNlcnZpY2UgPSBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLnZpZXdwb3J0cyA9IHt9O1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gUmVuZGVyZXJHZXR0ZXIoKTtcblxuICAgICAgICB0aGlzLnJlYWRDb25maWcgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgdmFyIHczNCA9IHRoaXMucmVuZGVyZXIud2lkdGgvNCAqIDM7XG4gICAgICAgICAgICB2YXIgdzQgID0gdGhpcy5yZW5kZXJlci53aWR0aC80O1xuICAgICAgICAgICAgdmFyIGgzICA9IHRoaXMucmVuZGVyZXIuaGVpZ2h0LzI7XG5cbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsOjAsIHQ6MCwgXG4gICAgICAgICAgICAgICAgICAgIHc6dGhpcy5yZW5kZXJlci53aWR0aCwgaDp0aGlzLnJlbmRlcmVyLmhlaWdodCwgXG4gICAgICAgICAgICAgICAgICAgIGRyYXdVSTogdHJ1ZSwgbmFtZTpcImRlZmF1bHRcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge2w6dzM0LCB0OmgzKjIsIHc6dzQsIGg6aDMsIG5hbWU6XCJ0b3BsZWZ0XCJ9LFxuICAgICAgICAgICAgICAgIHtsOnczNCwgdDpoMywgdzp3NCwgaDpoMywgbmFtZTpcImNlbnRlcmxlZnRcIn0sXG4gICAgICAgICAgICAgICAge2w6dzM0LCB0OjAsIHc6dzQsIGg6aDMsIG5hbWU6XCJib3R0b21sZWZ0XCJ9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0dXAgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgXy5lYWNoKHRoaXMucmVhZENvbmZpZygpLCBmdW5jdGlvbihjb25maWcpe1xuICAgICAgICAgICAgICAgIHZhciB2aWV3cG9ydCA9IG5ldyBWaWV3cG9ydChjb25maWcpO1xuICAgICAgICAgICAgICAgIHRoYXQudmlld3BvcnRzW2NvbmZpZy5uYW1lXSA9IHZpZXdwb3J0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gZnVuY3Rpb24oIG1vdXNlU3RhdGUgKXtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIm1vdXNlIHByb2plY3Rpb24gb3ZlciB2aWV3cG9ydHMgaXMgbm90IGltcGxlbWVudGVkXCIpO1xuICAgICAgICB9XG5cbiAgICBcbiAgICAgICAgdGhpcy5nZXRWaWV3cG9ydHM9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWV3cG9ydHM7IFxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmluZFZpZXdzID0gZnVuY3Rpb24oIHZpZXdzQ29sbGVjdGlvbiApe1xuICAgICAgICAgICAgdmFyIGJpbmRDb25maWcgPSBTZXR0aW5ncygpLmdldFZpZXdwb3J0QmluZGluZ3MoKTtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIF8uZWFjaChiaW5kQ29uZmlnLCBmdW5jdGlvbih2aWV3cG9ydE5hbWUsIGJpbmRTdHJpbmcgKXtcbiAgICAgICAgICAgICAgICB2YXIgdnAgPSB0aGF0LnZpZXdwb3J0c1t2aWV3cG9ydE5hbWVdO1xuICAgICAgICAgICAgICAgIHZhciB2ICA9IHZpZXdzQ29sbGVjdGlvbi5nZXRCeUdsb2JhbE5hbWUoYmluZFN0cmluZyk7XG4gICAgICAgICAgICAgICAgdnAuYmluZCggdiApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vIElucHV0U2VydmljZUdldHRlcigpLnNldFZpZXdwb3J0cyggdGhpcy5nZXRWaWV3cG9ydHMoKSk7XG4gICAgICAgICAgICBJbnB1dFNlcnZpY2VHZXR0ZXIoKVxuICAgICAgICAgICAgLnNldEFjdGl2ZVNjZW5lKCB0aGlzLnZpZXdwb3J0c1tcImRlZmF1bHRcIl0udmlldy5zY2VuZSk7XG5cblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNjID0gbnVsbDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoc2MgPT0gbnVsbCl7XG4gICAgICAgICAgICBzYyA9IG5ldyBTZXJ2aWNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNjO1xuICAgIH1cbiAgIFxuXG59KSgpXG4iLCJ3aW5kb3cuV29ybGQgPSBmdW5jdGlvbihhdXRoX2hhc2gsIHVzZXJfaWQpe1xuICAgIHRoaXMuYXV0aF9oYXNoID0gYXV0aF9oYXNoO1xuICAgIHRoaXMudXNlcl9pZCA9IHVzZXJfaWQ7XG5cbiAgICB0aGlzLmlzU3RvcHBlZCA9IGZhbHNlOyBcblxuXG4gICAgdGhpcy5pbml0UmVuZGVyZXIoKTtcbiAgICB0aGlzLmluaXRDdXN0b21VcGRhdGVyKCk7XG4gICAgdGhpcy5zZXR1cFZpZXdwb3J0cygpO1xuXG4gICAgdmFyIGNoZWNrQ29udGV4dCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICB0aGlzLnN0YXJ0U2NlbmVMb2FkaW5nKClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkdvIGxvYWRpbmdcIik7XG4gICAgICAgICAgICB0aGF0LmluaXRWaWV3cygpO1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiVmlld3MgaW5pdGVkXCIpO1xuICAgICAgICAgICAgdGhhdC5pbml0U3luY2luZygpO1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiU3luY2luZyBpbml0ZWRcIik7XG4gICAgICAgICAgICB0aGF0LnNldHVwTmV0d29ya0xpc3RlbmVycygpO1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKFwibmV0d29yayBsaXN0ZW5lcnMgc2V0IHVwXCIpO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbigpe1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiR28gc2ltdWxhdGlvblwiKTtcbiAgICAgICAgICAgIHRoYXQuc3RhcnRTaW11bGF0aW9uKCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5mYWlsKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oIHJlYXNvbiApO1xuICAgICAgICAgICAgc2V0VGltZW91dCggY2hlY2tDb250ZXh0LCAzMDAwICk7XG4gICAgICAgICAgICB0aGF0LmNsZWFyKCk7XG4gICAgICAgICAgICBkZWxldGUgdGhhdDtcblxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgdGhhdC5jbGVhcigpO1xuICAgICAgICB9KS5kb25lKCk7XG4gICAgfTtcblxuICAgIGNoZWNrQ29udGV4dCA9IGNoZWNrQ29udGV4dC5iaW5kKHRoaXMpO1xuICAgIGNoZWNrQ29udGV4dCgpO1xuXG59O1xuXG53aW5kb3cuV29ybGQucHJvdG90eXBlID0gXy5leHRlbmQod2luZG93LldvcmxkLnByb3RvdHlwZSwge1xuICAgIFxuICAgIGNsZWFyOiBmdW5jdGlvbigpe1xuICAgICAgICBpZiAodGhpcy5zY2VuZXMpe1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdjbGVhcmluZyBzY2VuZXMnKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5zY2VuZXMpe1xuICAgICAgICAgICAgICAgIHRoaXMuc2NlbmVzW2ldLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zY2VuZXNbaV09IG51bGw7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2NlbmVzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICBpZighICh0aGlzLnN5bmNocm9uaXplcikpe1xuICAgICAgICAgICAgdGhpcy5zeW5jaHJvbml6ZXIgPSBTeW5jaHJvbml6ZXJHZXR0ZXIoKTtcblxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3luY2hyb25pemVyLnN0b3AoKTtcblxuICAgIH0sXG4gICAgaW5pdFJlbmRlcmVyIDogZnVuY3Rpb24oKXtcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXJlckdldHRlcigpO1xuICAgIH0sXG4gICAgc2V0dXBWaWV3cG9ydHMgOiBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLnZpZXdwb3J0U2VydmljZSA9IFZpZXdwb3J0U2VydmljZUdldHRlcigpO1xuICAgICAgICB0aGlzLnZpZXdwb3J0U2VydmljZS5zZXR1cCgpO1xuXG4gICAgfSxcblxuICAgIHN0YXJ0U2NlbmVMb2FkaW5nIDogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHNjZW5lUHJvbWlzZSA9IEdhbWVDb250ZXh0TG9hZGVyICggU29ja2V0U2VydmljZUdldHRlcigpIClcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB0aGF0LnNjZW5lcyA9IHt9O1xuICAgICAgICB0aGF0LmFjdG9ycyA9IHt9O1xuICAgICAgICB0aGF0LmFjdG9yU2NlbmUgPSB7fTtcbiAgICAgICAgcmV0dXJuIHNjZW5lUHJvbWlzZS50aGVuKGZ1bmN0aW9uKGNvbnRleHQpe1xuICAgICAgICAgICAgXy5lYWNoKGNvbnRleHQuc2NlbmVzLCBmdW5jdGlvbihzY2VuZURlc2NyaXB0aW9uKXtcbiAgICAgICAgICAgICAgICB0aGF0LnNjZW5lc1tzY2VuZURlc2NyaXB0aW9uLnNjZW5lLkdVSURdID0gc2NlbmVEZXNjcmlwdGlvbi5zY2VuZTtcbiAgICAgICAgICAgICAgICBfLmVhY2goc2NlbmVEZXNjcmlwdGlvbi5hY3RvcnMsIGZ1bmN0aW9uKGFjdG9yKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoY29udGV4dC5jdXJyZW50VXNlckFjdG9ycy5pbmRleE9mKGFjdG9yLkdVSUQpICE9PSAtMSl7IC8vIGFjdG9yLkdVSUQgaW4gY29udGV4dC5jdXJyZW50VXNlckFjdG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5hY3RvcnNbYWN0b3IuR1VJRF0gPSBhY3RvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuYWN0b3JTY2VuZVthY3Rvci5HVUlEXSA9IHNjZW5lRGVzY3JpcHRpb24uc2NlbmU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgIH0sXG5cbiAgICBpbml0Vmlld3M6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHZpZXdDb2xsZWN0aW9uID0gbmV3IFZpZXdDb2xsZWN0aW9uKCk7XG4gICAgICAgIF8uZWFjaCh0aGlzLmFjdG9ycywgZnVuY3Rpb24oYWN0b3Ipe1xuICAgICAgICAgICAgdmFyIHNjZW5lID0gdGhhdC5hY3RvclNjZW5lW2FjdG9yLkdVSURdO1xuICAgICAgICAgICAgdmFyIHZpZXdzID0gc2NlbmVcbiAgICAgICAgICAgICAgICAuZ2V0X29iamVjdChhY3Rvci5jb250cm9sLm9iamVjdF9ndWlkKVxuICAgICAgICAgICAgICAgIC53b3JrcG9pbnRzW2FjdG9yLmNvbnRyb2wud29ya3BvaW50XS52aWV3cztcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBzY2VuZS5nZXRfb2JqZWN0KGFjdG9yLmNvbnRyb2wub2JqZWN0X2d1aWQpXG4gICAgICAgICAgICB2YXIgbWVzaCA9IHNjZW5lLm1lc2hlc1thY3Rvci5jb250cm9sLm9iamVjdF9ndWlkXTtcbiAgICAgICAgICAgIHZhciB1aXMgPSBtZXNoLmdldFVJRm9yV1AoYWN0b3IuY29udHJvbC53b3JrcG9pbnQpO1xuICAgICAgICAgICAgXy5lYWNoKHZpZXdzLCBmdW5jdGlvbih2aWV3TmFtZSl7XG4gICAgICAgICAgICAgICAgdmFyIHZpZXdHbG9iYWxOYW1lID0gW29iamVjdC50eXBlLCBvYmplY3Quc3ViX3R5cGUsIGFjdG9yLmNvbnRyb2wud29ya3BvaW50LCB2aWV3TmFtZV0uam9pbignLicpO1xuICAgICAgICAgICAgICAgIHZhciB2aWV3SWRlbnRpdHkgPSBzY2VuZS5HVUlEICsgYWN0b3IuY29udHJvbC5vYmplY3RfZ3VpZCArIHZpZXdOYW1lO1xuICAgICAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IFZpZXcoc2NlbmUsIHZpZXdOYW1lLCBvYmplY3QsIG1lc2ggKTtcbiAgICAgICAgICAgICAgICB2aWV3Q29sbGVjdGlvbi5hZGQodmlld0lkZW50aXR5LCB2aWV3R2xvYmFsTmFtZSwgdmlldywgYWN0b3IsIHVpcyApO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnZpZXdDb2xsZWN0aW9uID0gdmlld0NvbGxlY3Rpb247XG4gICAgICAgIHRoaXMudmlld3BvcnRTZXJ2aWNlLmJpbmRWaWV3cyh0aGlzLnZpZXdDb2xsZWN0aW9uKTtcblxuICAgIH0sXG5cbiAgICBpbml0U3luY2luZzogZnVuY3Rpb24oKXtcblxuICAgICAgICBjb25zb2xlLmluZm8oXCJTeW5jcm9uaXplciBpbml0ZWRcIik7XG5cbiAgICAgICAgdGhpcy5zeW5jaHJvbml6ZXIgPSBTeW5jaHJvbml6ZXJHZXR0ZXIoKTtcbiAgICAgICAgdGhpcy5zeW5jaHJvbml6ZXIuc3RhcnQoKTtcbiAgICB9LFxuXG4gICAgc2V0dXBOZXR3b3JrTGlzdGVuZXJzOiBmdW5jdGlvbigpe1xuXG4gICAgICAgIHZhciBzb2NrZXRTZXJ2aWNlID0gU29ja2V0U2VydmljZUdldHRlcigpO1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHNvY2tldFNlcnZpY2UuYWRkTGlzdGVuZXIoXCJGXCIsIGZ1bmN0aW9uKCBkYXRhICl7XG4gICAgICAgICAgICBpZihkYXRhLnNjZW5lIGluIHRoYXQuc2NlbmVzKXtcbiAgICAgICAgICAgICAgICB0aGF0LnNjZW5lc1tkYXRhLnNjZW5lXVxuICAgICAgICAgICAgICAgICAgICAuYWRkTmV0d29ya01lc3NhZ2UoZGF0YS5hKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgICBzb2NrZXRTZXJ2aWNlLmFkZExpc3RlbmVyKFwiQUxNXCIsIGZ1bmN0aW9uKCBkYXRhICl7XG4gICAgICAgICAgICBpZihkYXRhLnNjZW5lIGluIHRoYXQuc2NlbmVzKXtcbiAgICAgICAgICAgICAgICB0aGF0LnNjZW5lc1tkYXRhLnNjZW5lXS5zeW5jKGRhdGEuYWxtYW5hY2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGluaXRDdXN0b21VcGRhdGVyIDogZnVuY3Rpb24oKXtcbiAgICBcbiAgICAgICAgdGhpcy5jdXN0b21VcGRhdGVycyA9IEN1c3RvbVVwZGF0ZXJHZXR0ZXIoKTtcbiAgICB9LFxuICAgIG1ha2VTY2VuZVRpY2tzIDogZnVuY3Rpb24oKXtcbiAgICAgICAgXy5lYWNoKHRoaXMuc2NlbmVzLCBmdW5jdGlvbiggc2NlbmUsIGd1aWQgKXtcbiAgICAgICAgICAgIHNjZW5lLnRpY2soKTtcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIGFuaW1hdGU6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMubWFrZVNjZW5lVGlja3MoKTtcbiAgICAgICAgdGhpcy5jdXN0b21VcGRhdGVycy51cGRhdGUoKTtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICBfLmVhY2godGhpcy52aWV3cG9ydFNlcnZpY2UuZ2V0Vmlld3BvcnRzKCksIGZ1bmN0aW9uKHZpZXdQb3J0KXtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiYW5pbWF0ZVwiKTtcbiAgICAgICAgICAgIGlmKHZpZXdQb3J0LnZpZXcpe1xuICAgICAgICAgICAgICAgIHRoYXQucmVuZGVyZXIucmVuZGVyKHZpZXdQb3J0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgaWYoIXRoaXMuaXNTdG9wcGVkKXtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGUuYmluZCh0aGlzKSApO1xuXG4gICAgICAgIH1cbiAgICAgICAgICAgIFxuXG4gICAgfSxcbiAgICBzdGFydFNpbXVsYXRpb246IGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKHRoaXMuaXNTdG9wcGVkKXtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0ZS5iaW5kKHRoaXMpKTtcbiAgICB9LFxuICAgIHN0b3BBbmltYXRpb24gOiBmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgfVxufSk7XG4iLCIoZnVuY3Rpb24gKCl7XG4gICAgdmFyIFN0YXRpY0xvZ2dlciA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuX3ZhbHMgPSB7fVxuICAgICAgICB0aGlzLnNldFZhbHVlID0gZnVuY3Rpb24ocGFyYW0sIHZhbCl7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwYXJhbSwgdmFsKTtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHNbcGFyYW1dID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB0aGlzLmNvbnQgPSAkKFwiPGRpdj5cIikuY3NzKHtcbiAgICAgICAgICAgICAgICAncG9zaXRpb24nOidmaXhlZCcsXG4gICAgICAgICAgICAgICAgJ3RvcCc6MCxcbiAgICAgICAgICAgICAgICAncmlnaHQnOjAsXG4gICAgICAgICAgICAgICAgJ3dpZHRoJzo0MDAsXG4gICAgICAgICAgICAgICAgJ2JvdHRvbSc6MCxcbiAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1jb2xvcic6XCJyZ2JhKDAsMjAwLDEwMCwwLjcpXCJcbiAgICAgICAgICAgIH0pLmFwcGVuZFRvKCdib2R5Jyk7XG4gICAgICAgICAgICAvLyBcdGNvbnNvbGUubG9nKHRoaXMuY29udCk7XG5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZHJhdyA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB0aGlzLmNvbnQuZmluZCgnKicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLl92YWxzKTtcbiAgICAgICAgICAgIGZvcih2YXIgaSBpbiB0aGlzLl92YWxzKXtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdhc2RhJyk7XG4gICAgICAgICAgICAgICAgYyA9ICQoJzxkaXY+JykuYXBwZW5kVG8odGhpcy5jb250KVxuICAgICAgICAgICAgICAgIGwgPSAkKCc8c3Bhbj4nKS5odG1sKGkgKyBcIiZuYnNwOzogJm5ic3A7XCIpLmNzcygnZm9udC13ZWlnaHQnLCdib2xkJykuYXBwZW5kVG8oYyk7XG4gICAgICAgICAgICAgICAgdiA9ICQoJzxzcGFuPicpLnRleHQoIHRoaXMuX3ZhbHNbaV0gKS5hcHBlbmRUbyhjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgd2luZG93LlNMID0gbmV3IFN0YXRpY0xvZ2dlcigpO1xuXG59KSgpO1xuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=